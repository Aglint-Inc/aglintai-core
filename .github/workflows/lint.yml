name: Lint and Preview Deploy

# Define when this workflow should run
on:
  push:
    branches: [development]
  pull_request:
    branches: [development]

# Set permissions for the workflow
permissions:
  checks: write
  contents: read
  pull-requests: write

jobs:
  # lint:
  #   name: Run Lint
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Step 1: Check out the repository
  #     - name: Check out Git repository
  #       uses: actions/checkout@v4

  #     # Step 2: Set up Node.js environment
  #     - name: Setup Node.js environment
  #       uses: actions/setup-node@v4.0.4
  #       with:
  #         node-version: "20"
  #         cache: "npm"
  #         cache-dependency-path: "**/package-lock.json"

  #     # Step 3: Install project dependencies
  #     - name: Install Dependencies
  #       run: npm ci

  #     # Step 4: Cache Turborepo for faster subsequent runs
  #     - name: Cache Turborepo
  #       uses: actions/cache@v4
  #       with:
  #         path: .turbo
  #         key: ${{ runner.os }}-turbo-${{ github.sha }}
  #         restore-keys: |
  #           ${{ runner.os }}-turbo-

  #     # Step 5: Run the linter for all workspaces
  #     - name: Run Linter
  #       run: |
  #         npx turbo run lint --cache-dir=.turbo
  #         cd apps/aglint-recruiter && npm run lint
  #       env:
  #         NODE_OPTIONS: --max-old-space-size=4096

  preview-deploy:
    name: Preview Deploy to Vercel
    needs: lint # This job will only run if the lint job succeeds
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/development' # Only run on pushes to development branch

    steps:
      # Step 1: Check out the repository
      - name: Check out Git repository
        uses: actions/checkout@v4

      # Step 2: Install Vercel CLI globally
      - name: Install Vercel CLI
        run: npm install -g vercel

      # Step 3: Pull Vercel environment information
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }}

      # Step 4: Deploy to Vercel
      - name: Deploy to Vercel
        run: |
          echo "Attempting to deploy..."
          # Deploy to Vercel with --no-wait option and save stdout and stderr to files
          vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} --yes --no-wait >deployment-url.txt 2>error.txt

          # Extract the deployment URL from the output file
          DEPLOYMENT_URL=$(grep -oP 'https:\/\/[^ ]+' deployment-url.txt | head -n1)

          if [ -n "$DEPLOYMENT_URL" ]; then
            echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
            echo "Deployment URL found: $DEPLOYMENT_URL"
          else
            echo "Failed to extract deployment URL. Deployment output:"
            cat deployment-url.txt
            echo "Error output:"
            cat error.txt
            exit 1
          fi

      # Step 5: Comment the deployment URL on the commit
      - name: Comment Deployment URL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: 'Preview deployed to: ${{ env.DEPLOYMENT_URL }}'
            })
