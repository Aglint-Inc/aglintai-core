name: Lint and Preview Deploy

# Define when this workflow should run
on:
  push:
    branches: [development]
  pull_request:
    branches: [development]

# Set permissions for the workflow
permissions:
  checks: write
  contents: read

jobs:
  lint:
    name: Run Lint
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Check out Git repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      # Step 3: Install project dependencies
      - name: Install Dependencies
        run: npm ci

      # Step 4: Cache Turborepo for faster subsequent runs
      - name: Cache Turborepo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      # Step 5: Run the linter for all workspaces
      - name: Run Linter
        run: |
          npx turbo run lint --cache-dir=.turbo
          cd apps/aglint-recruiter && npm run lint
        env:
          NODE_OPTIONS: --max-old-space-size=4096

  preview-deploy:
    name: Preview Deploy to Vercel
    needs: lint # This job will only run if the lint job succeeds
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/development' # Only run on pushes to development branch

    steps:
      # Step 1: Check out the repository
      - name: Check out Git repository
        uses: actions/checkout@v4

      # Step 2: Install Vercel CLI globally
      - name: Install Vercel CLI
        run: npm install -g vercel

      # Step 3: Pull Vercel environment information
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }}

      # Step 4: Deploy to Vercel
      - name: Deploy to Vercel
        run: |
          echo "Attempting to deploy..."
          # Start Vercel deployment in the background and capture its output
          vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} --project-id=${{ secrets.VERCEL_PROJECT_ID }} --yes > deployment_output.txt 2>&1 &
          DEPLOY_PID=$!

          # Wait for up to 5 seconds for the URL to appear
          for i in {1..5}; do
            if DEPLOYMENT_URL=$(grep -oP 'https:\/\/[^ ]+' deployment_output.txt | head -n1); then
              echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
              echo "Deployment URL found: $DEPLOYMENT_URL"
              break
            fi
            sleep 1
          done

          # If no URL found after 5 seconds, report an error
          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "Failed to extract deployment URL within 5 seconds. Partial output:"
            head -n 20 deployment_output.txt
            exit 1
          fi

          # Allow the deployment to continue in the background
          disown $DEPLOY_PID

      # Step 5: Comment the deployment URL on the commit
      - name: Comment Deployment URL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: 'Preview deployed to: ${{ env.DEPLOYMENT_URL }}'
            })
