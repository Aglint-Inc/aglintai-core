// Generated by ts-to-zod
import { z } from "zod";

export const jsonSchema = z.any();

export const emailFetchStatusSchema = z.union([
  z.literal("not fetched"),
  z.literal("success"),
  z.literal("unable to fetch"),
]);

export const aglintCandidatesInsertSchema = z.object({
  aglint_id: z.string().optional(),
  city: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  created_at: z.string().optional(),
  departments: z.array(z.string()).optional().nullable(),
  email: z.string().optional().nullable(),
  email_fetch_status: emailFetchStatusSchema.optional(),
  email_status: z.string().optional().nullable(),
  employment_history: z.array(jsonSchema).optional().nullable(),
  extrapolated_email_confidence: z.string().optional().nullable(),
  facebook_url: z.string().optional().nullable(),
  first_name: z.string().optional().nullable(),
  functions: z.array(z.string()).optional().nullable(),
  github_url: z.string().optional().nullable(),
  headline: z.string().optional().nullable(),
  id: z.string(),
  intent_strength: z.string().optional().nullable(),
  is_likely_to_engage: z.boolean().optional().nullable(),
  last_name: z.string().optional().nullable(),
  linkedin_url: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  organization: jsonSchema.optional().nullable(),
  organization_id: z.string().optional().nullable(),
  phone_numbers: jsonSchema.optional().nullable(),
  photo_url: z.string().optional().nullable(),
  revealed_for_current_team: z.boolean().optional().nullable(),
  search_query: jsonSchema,
  seniority: z.string().optional().nullable(),
  show_intent: z.boolean().optional().nullable(),
  state: z.string().optional().nullable(),
  subdepartments: z.array(z.string()).optional().nullable(),
  title: z.string().optional().nullable(),
  twitter_url: z.string().optional().nullable(),
});

export const aglintCandidatesUpdateSchema = z.object({
  aglint_id: z.string().optional(),
  city: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  created_at: z.string().optional(),
  departments: z.array(z.string()).optional().nullable(),
  email: z.string().optional().nullable(),
  email_fetch_status: emailFetchStatusSchema.optional(),
  email_status: z.string().optional().nullable(),
  employment_history: z.array(jsonSchema).optional().nullable(),
  extrapolated_email_confidence: z.string().optional().nullable(),
  facebook_url: z.string().optional().nullable(),
  first_name: z.string().optional().nullable(),
  functions: z.array(z.string()).optional().nullable(),
  github_url: z.string().optional().nullable(),
  headline: z.string().optional().nullable(),
  id: z.string().optional(),
  intent_strength: z.string().optional().nullable(),
  is_likely_to_engage: z.boolean().optional().nullable(),
  last_name: z.string().optional().nullable(),
  linkedin_url: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  organization: jsonSchema.optional().nullable(),
  organization_id: z.string().optional().nullable(),
  phone_numbers: jsonSchema.optional().nullable(),
  photo_url: z.string().optional().nullable(),
  revealed_for_current_team: z.boolean().optional().nullable(),
  search_query: jsonSchema.optional(),
  seniority: z.string().optional().nullable(),
  show_intent: z.boolean().optional().nullable(),
  state: z.string().optional().nullable(),
  subdepartments: z.array(z.string()).optional().nullable(),
  title: z.string().optional().nullable(),
  twitter_url: z.string().optional().nullable(),
});

export const aglintCandidatesRelationshipsSchema = z.tuple([]);

export const aiVideosRowSchema = z.object({
  created_at: z.string(),
  error: jsonSchema.nullable(),
  file_url: z.string().nullable(),
  id: z.number(),
  video_id: z.string().nullable(),
  video_url: z.string().nullable(),
});

export const aiVideosInsertSchema = z.object({
  created_at: z.string().optional(),
  error: jsonSchema.optional().nullable(),
  file_url: z.string().optional().nullable(),
  id: z.number().optional(),
  video_id: z.string().optional().nullable(),
  video_url: z.string().optional().nullable(),
});

export const aiVideosUpdateSchema = z.object({
  created_at: z.string().optional(),
  error: jsonSchema.optional().nullable(),
  file_url: z.string().optional().nullable(),
  id: z.number().optional(),
  video_id: z.string().optional().nullable(),
  video_url: z.string().optional().nullable(),
});

export const aiVideosRelationshipsSchema = z.tuple([]);

export const emailSlackTypesSchema = z.union([
  z.literal("interviewEnd_slack_interviewers"),
  z.literal("interviewerConfirmation_slack_interviewers"),
  z.literal("interviewStart_slack_interviewers"),
  z.literal("agent_email_candidate"),
  z.literal("applicantReject_email_applicant"),
  z.literal("applicationRecieved_email_applicant"),
  z.literal("confInterview_email_organizer"),
  z.literal("confirmInterview_email_applicant"),
  z.literal("debrief_email_interviewer"),
  z.literal("interReschedReq_email_recruiter"),
  z.literal("interviewCancel_email_applicant"),
  z.literal("InterviewCancelReq_email_recruiter"),
  z.literal("interviewReschedule_email_applicant"),
  z.literal("interviewStart_email_applicant"),
  z.literal("interviewStart_email_interviewers"),
  z.literal("phoneScreen_email_candidate"),
  z.literal("phoneScreenRemind_email_applicant"),
  z.literal("selfScheduleReminder_email_applicant"),
  z.literal("sendAvailReqReminder_email_applicant"),
  z.literal("sendSelfScheduleRequest_email_applicant"),
  z.literal("sendAvailabilityRequest_email_applicant"),
  z.literal("availabilityReqResend_email_candidate"),
  z.literal("interviewDetails_calender_interviewer"),
  z.literal("rescheduleSelfSchedule_email_applicant"),
  z.literal("interviewStart_email_organizer"),
  z.literal("meetingDeclined_email_organizer"),
  z.literal("meetingAccepted_email_organizer"),
  z.literal("candidateBook_slack_interviewerForFeedback"),
  z.literal("candidateBook_email_interviewerForFeedback"),
  z.literal("interviewEnd_slack_interviewerForFeedback"),
  z.literal("interviewEnd_email_interviewerForFeedback"),
  z.literal("candidateBook_slack_interviewerForConfirmation"),
  z.literal("onSignup_email_admin"),
  z.literal("onInvite_email_user"),
  z.literal("interviewEnd_email_shadowTraineeForMeetingAttendence"),
  z.literal("interviewEnd_email_rShadowTraineeForMeetingAttendence"),
  z.literal("interviewEnd_slack_shadowTraineeForMeetingAttendence"),
  z.literal("interviewEnd_slack_rShadowTraineeForMeetingAttendence"),
  z.literal("onQualified_email_trainee"),
  z.literal("onQualified_email_approved"),
  z.literal("onQualified_slack_trainee"),
  z.literal("onQualified_slack_approved"),
  z.literal("onTrainingComplete_slack_approverForTraineeMeetingQualification"),
  z.literal("onTrainingComplete_email_approverForTraineeMeetingQualification"),
  z.literal("interviewerResumed_email_admin"),
  z.literal("interviewEnd_slack_organizerForMeetingStatus"),
  z.literal("interviewEnd_email_organizerForMeetingStatus"),
  z.literal("onRequestSchedule_emailAgent_getCandidateAvailability"),
  z.literal("onRequestSchedule_emailLink_getCandidateAvailability"),
  z.literal("onReceivingAvailReq_agent_sendSelfScheduleRequest"),
  z.literal("onReceivingAvailReq_agent_confirmSlot"),
  z.literal("onRequestSchedule_emailLink_sendSelfSchedulingLink"),
  z.literal("onRequestSchedule_phoneAgent_selfSchedule"),
  z.literal("onRequestSchedule_emailAgent_selfSchedule"),
  z.literal("onRequestReschedule_emailLink_resendAvailRequest"),
  z.literal("onRequestCancel_agent_cancelEvents"),
  z.literal("onRequestCancel_slack_interviewersOrganizer"),
  z.literal("onRequestInterviewerDecline_agent_changeInterviewer"),
]);

export const applicationEmailStatusInsertSchema = z.object({
  application_id: z.string(),
  created_at: z.string().optional(),
  email: emailSlackTypesSchema,
  id: z.string().optional(),
});

export const applicationEmailStatusUpdateSchema = z.object({
  application_id: z.string().optional(),
  created_at: z.string().optional(),
  email: emailSlackTypesSchema.optional(),
  id: z.string().optional(),
});

export const applicationEmailStatusRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("application_email_status_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_status_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("application_email_status_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("application_email_status_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("application_email_status_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("application_id")]),
  }),
]);

export const applicationLoggerSchema = z.union([
  z.literal("email_agent"),
  z.literal("phone_agent"),
  z.literal("user"),
  z.literal("system"),
  z.literal("candidate"),
]);

export const modulesSchema = z.union([
  z.literal("standard"),
  z.literal("scheduler"),
  z.literal("assessment"),
  z.literal("jobs"),
]);

export const applicationLogsInsertSchema = z.object({
  application_id: z.string(),
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  logged_by: applicationLoggerSchema.optional(),
  metadata: jsonSchema.optional().nullable(),
  module: modulesSchema.optional(),
  task_id: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
});

export const applicationLogsUpdateSchema = z.object({
  application_id: z.string().optional(),
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  logged_by: applicationLoggerSchema.optional(),
  metadata: jsonSchema.optional().nullable(),
  module: modulesSchema.optional(),
  task_id: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
});

export const applicationLogsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("application_logs_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("application_logs_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("application_logs_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("application_logs_task_id_fkey"),
    columns: z.tuple([z.literal("task_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("new_tasks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("application_logs_task_id_fkey"),
    columns: z.tuple([z.literal("task_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tasks_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_application_logs_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_status_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_application_logs_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_application_logs_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_application_logs_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("application_id")]),
  }),
]);

export const applicationProcessingStatusSchema = z.union([
  z.literal("not started"),
  z.literal("processing"),
  z.literal("failed"),
  z.literal("success"),
]);

export const applicationSourceSchema = z.union([
  z.literal("ashby"),
  z.literal("lever"),
  z.literal("greenhouse"),
  z.literal("resume_upload"),
  z.literal("manual_upload"),
  z.literal("csv_upload"),
  z.literal("apply_link"),
  z.literal("candidate_database"),
]);

export const applicationsInsertSchema = z.object({
  applied_at: z.string().optional(),
  bookmarked: z.boolean().optional(),
  candidate_file_id: z.string().optional().nullable(),
  candidate_id: z.string().optional().nullable(),
  converted_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  feedback: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  is_new: z.boolean().optional(),
  is_resume_fetching: z.boolean().optional(),
  job_id: z.string(),
  overall_interview_score: z.number().optional(),
  overall_score: z.number().optional(),
  phone_screening: jsonSchema.optional().nullable(),
  processing_started_at: z.string().optional().nullable(),
  processing_status: applicationProcessingStatusSchema.optional(),
  recruiter_id: z.string(),
  remote_data: jsonSchema.optional().nullable(),
  remote_id: z.string().optional().nullable(),
  retry: z.number().optional(),
  score_json: jsonSchema.optional().nullable(),
  source: applicationSourceSchema.optional(),
  status: z.string().optional(),
  status_emails_sent: jsonSchema.optional(),
});

export const applicationsUpdateSchema = z.object({
  applied_at: z.string().optional(),
  bookmarked: z.boolean().optional(),
  candidate_file_id: z.string().optional().nullable(),
  candidate_id: z.string().optional().nullable(),
  converted_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  feedback: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  is_new: z.boolean().optional(),
  is_resume_fetching: z.boolean().optional(),
  job_id: z.string().optional(),
  overall_interview_score: z.number().optional(),
  overall_score: z.number().optional(),
  phone_screening: jsonSchema.optional().nullable(),
  processing_started_at: z.string().optional().nullable(),
  processing_status: applicationProcessingStatusSchema.optional(),
  recruiter_id: z.string().optional(),
  remote_data: jsonSchema.optional().nullable(),
  remote_id: z.string().optional().nullable(),
  retry: z.number().optional(),
  score_json: jsonSchema.optional().nullable(),
  source: applicationSourceSchema.optional(),
  status: z.string().optional(),
  status_emails_sent: jsonSchema.optional(),
});

export const applicationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("applications_candidate_file_id_fkey"),
    columns: z.tuple([z.literal("candidate_file_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_files"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_candidate_id_fkey"),
    columns: z.tuple([z.literal("candidate_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("candidate_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_candidate_id_fkey"),
    columns: z.tuple([z.literal("candidate_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidates"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("job_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("public_jobs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const fileTypeSchema = z.union([
  z.literal("resume"),
  z.literal("coverletter"),
  z.literal("cv"),
  z.literal("image"),
]);

export const candidateFilesInsertSchema = z.object({
  candidate_id: z.string(),
  created_at: z.string().optional(),
  education_embedding: z.string().optional().nullable(),
  experience_embedding: z.string().optional().nullable(),
  file_url: z.string().optional().nullable(),
  id: z.string().optional(),
  resume_embedding: z.string().optional().nullable(),
  resume_json: jsonSchema.optional().nullable(),
  resume_text: z.string().optional().nullable(),
  skills_embedding: z.string().optional().nullable(),
  type: fileTypeSchema.optional().nullable(),
});

export const candidateFilesUpdateSchema = z.object({
  candidate_id: z.string().optional(),
  created_at: z.string().optional(),
  education_embedding: z.string().optional().nullable(),
  experience_embedding: z.string().optional().nullable(),
  file_url: z.string().optional().nullable(),
  id: z.string().optional(),
  resume_embedding: z.string().optional().nullable(),
  resume_json: jsonSchema.optional().nullable(),
  resume_text: z.string().optional().nullable(),
  skills_embedding: z.string().optional().nullable(),
  type: fileTypeSchema.optional().nullable(),
});

export const candidateFilesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("candidate_files_candidate_id_fkey"),
    columns: z.tuple([z.literal("candidate_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("candidate_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("candidate_files_candidate_id_fkey"),
    columns: z.tuple([z.literal("candidate_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidates"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const candidateListRowSchema = z.object({
  candidates: z.array(z.string()),
  created_at: z.string(),
  id: z.string(),
  name: z.string(),
  recruiter_id: z.string(),
});

export const candidateListInsertSchema = z.object({
  candidates: z.array(z.string()).optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string(),
  recruiter_id: z.string(),
});

export const candidateListUpdateSchema = z.object({
  candidates: z.array(z.string()).optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  recruiter_id: z.string().optional(),
});

export const candidateListRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("candidate_list_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const candidatePortalJobRowSchema = z.object({
  application_id: z.string().nullable(),
  banner: z.string().nullable(),
  created_at: z.string(),
  greetings: z.string().nullable(),
  id: z.string(),
  images: z.array(z.string()).nullable(),
  job_id: z.string().nullable(),
});

export const candidatePortalJobInsertSchema = z.object({
  application_id: z.string().optional().nullable(),
  banner: z.string().optional().nullable(),
  created_at: z.string().optional(),
  greetings: z.string().optional().nullable(),
  id: z.string().optional(),
  images: z.array(z.string()).optional().nullable(),
  job_id: z.string().optional().nullable(),
});

export const candidatePortalJobUpdateSchema = z.object({
  application_id: z.string().optional().nullable(),
  banner: z.string().optional().nullable(),
  created_at: z.string().optional(),
  greetings: z.string().optional().nullable(),
  id: z.string().optional(),
  images: z.array(z.string()).optional().nullable(),
  job_id: z.string().optional().nullable(),
});

export const candidatePortalJobRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("candidate_portal_job_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_status_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("candidate_portal_job_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("candidate_portal_job_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("candidate_portal_job_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("application_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("candidate_portal_job_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("job_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("candidate_portal_job_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("public_jobs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const candidatePortalMessageRowSchema = z.object({
  application_id: z.string().nullable(),
  availability_id: z.string().nullable(),
  created_at: z.string(),
  filter_id: z.string().nullable(),
  id: z.string(),
  is_readed: z.boolean().nullable(),
  message: z.string().nullable(),
  title: z.string().nullable(),
});

export const candidatePortalMessageInsertSchema = z.object({
  application_id: z.string().optional().nullable(),
  availability_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  filter_id: z.string().optional().nullable(),
  id: z.string().optional(),
  is_readed: z.boolean().optional().nullable(),
  message: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
});

export const candidatePortalMessageUpdateSchema = z.object({
  application_id: z.string().optional().nullable(),
  availability_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  filter_id: z.string().optional().nullable(),
  id: z.string().optional(),
  is_readed: z.boolean().optional().nullable(),
  message: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
});

export const candidatePortalMessageRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("candidate_portal_message_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_status_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("candidate_portal_message_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("candidate_portal_message_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("candidate_portal_message_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("application_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("candidate_portal_message_availability_id_fkey"),
    columns: z.tuple([z.literal("availability_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_request_availability"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("candidate_portal_message_filter_id_fkey"),
    columns: z.tuple([z.literal("filter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_filter_json"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const candidateRequestAvailabilityRowSchema = z.object({
  application_id: z.string(),
  availability: jsonSchema.nullable(),
  availability_id: z.string().nullable(),
  booking_confirmed: z.boolean(),
  created_at: z.string(),
  date_range: jsonSchema.nullable(),
  filter_id: z.string().nullable(),
  id: z.string(),
  is_task_created: z.boolean().nullable(),
  number_of_days: z.number().nullable(),
  number_of_slots: z.number().nullable(),
  recruiter_id: z.string(),
  request_id: z.string().nullable(),
  slots: z.array(jsonSchema).nullable(),
  total_slots: z.number().nullable(),
  user_timezone: z.string().nullable(),
  visited: z.boolean().nullable(),
});

export const candidateRequestAvailabilityInsertSchema = z.object({
  application_id: z.string(),
  availability: jsonSchema.optional().nullable(),
  availability_id: z.string().optional().nullable(),
  booking_confirmed: z.boolean().optional(),
  created_at: z.string().optional(),
  date_range: jsonSchema.optional().nullable(),
  filter_id: z.string().optional().nullable(),
  id: z.string().optional(),
  is_task_created: z.boolean().optional().nullable(),
  number_of_days: z.number().optional().nullable(),
  number_of_slots: z.number().optional().nullable(),
  recruiter_id: z.string(),
  request_id: z.string().optional().nullable(),
  slots: z.array(jsonSchema).optional().nullable(),
  total_slots: z.number().optional().nullable(),
  user_timezone: z.string().optional().nullable(),
  visited: z.boolean().optional().nullable(),
});

export const candidateRequestAvailabilityUpdateSchema = z.object({
  application_id: z.string().optional(),
  availability: jsonSchema.optional().nullable(),
  availability_id: z.string().optional().nullable(),
  booking_confirmed: z.boolean().optional(),
  created_at: z.string().optional(),
  date_range: jsonSchema.optional().nullable(),
  filter_id: z.string().optional().nullable(),
  id: z.string().optional(),
  is_task_created: z.boolean().optional().nullable(),
  number_of_days: z.number().optional().nullable(),
  number_of_slots: z.number().optional().nullable(),
  recruiter_id: z.string().optional(),
  request_id: z.string().optional().nullable(),
  slots: z.array(jsonSchema).optional().nullable(),
  total_slots: z.number().optional().nullable(),
  user_timezone: z.string().optional().nullable(),
  visited: z.boolean().optional().nullable(),
});

export const candidateRequestAvailabilityRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "candidate_request_availability_application_id_fkey",
    ),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_status_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "candidate_request_availability_application_id_fkey",
    ),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "candidate_request_availability_application_id_fkey",
    ),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "candidate_request_availability_application_id_fkey",
    ),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("application_id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "candidate_request_availability_recruiter_id_fkey",
    ),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_candidate_request_availability_request_id_fkey",
    ),
    columns: z.tuple([z.literal("request_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("request"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const dbSearchTypeSchema = z.union([
  z.literal("aglint"),
  z.literal("candidate"),
]);

export const candidateSearchHistoryInsertSchema = z.object({
  bookmarked_candidates: z.array(z.string()).optional().nullable(),
  candidates: z.array(z.string()).optional(),
  created_at: z.string().optional(),
  db_search: dbSearchTypeSchema.optional().nullable(),
  id: z.number().optional(),
  is_search_jd: z.boolean().optional().nullable(),
  query_json: jsonSchema.optional().nullable(),
  recruiter_id: z.string(),
  search_query: z.string().optional().nullable(),
  search_results: z.array(jsonSchema).optional().nullable(),
  used_credits: jsonSchema.optional(),
});

export const candidateSearchHistoryUpdateSchema = z.object({
  bookmarked_candidates: z.array(z.string()).optional().nullable(),
  candidates: z.array(z.string()).optional(),
  created_at: z.string().optional(),
  db_search: dbSearchTypeSchema.optional().nullable(),
  id: z.number().optional(),
  is_search_jd: z.boolean().optional().nullable(),
  query_json: jsonSchema.optional().nullable(),
  recruiter_id: z.string().optional(),
  search_query: z.string().optional().nullable(),
  search_results: z.array(jsonSchema).optional().nullable(),
  used_credits: jsonSchema.optional(),
});

export const candidateSearchHistoryRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("candidate_search_history_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const candidatesRowSchema = z.object({
  avatar: z.string().nullable(),
  city: z.string().nullable(),
  country: z.string().nullable(),
  created_at: z.string(),
  current_company: z.string().nullable(),
  current_job_title: z.string().nullable(),
  email: z.string(),
  experience_in_months: z.number().nullable(),
  first_name: z.string(),
  geolocation: z.unknown().nullable(),
  id: z.string(),
  last_name: z.string().nullable(),
  last_updated: z.string(),
  linkedin: z.string().nullable(),
  phone: z.string().nullable(),
  recruiter_id: z.string(),
  state: z.string().nullable(),
  timezone: z.string().nullable(),
});

export const candidatesInsertSchema = z.object({
  avatar: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  created_at: z.string().optional(),
  current_company: z.string().optional().nullable(),
  current_job_title: z.string().optional().nullable(),
  email: z.string(),
  experience_in_months: z.number().optional().nullable(),
  first_name: z.string().optional(),
  geolocation: z.unknown().optional().nullable(),
  id: z.string().optional(),
  last_name: z.string().optional().nullable(),
  last_updated: z.string().optional(),
  linkedin: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  recruiter_id: z.string(),
  state: z.string().optional().nullable(),
  timezone: z.string().optional().nullable(),
});

export const candidatesUpdateSchema = z.object({
  avatar: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  created_at: z.string().optional(),
  current_company: z.string().optional().nullable(),
  current_job_title: z.string().optional().nullable(),
  email: z.string().optional(),
  experience_in_months: z.number().optional().nullable(),
  first_name: z.string().optional(),
  geolocation: z.unknown().optional().nullable(),
  id: z.string().optional(),
  last_name: z.string().optional().nullable(),
  last_updated: z.string().optional(),
  linkedin: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  recruiter_id: z.string().optional(),
  state: z.string().optional().nullable(),
  timezone: z.string().optional().nullable(),
});

export const candidatesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("candidates_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const companyEmailTemplateRowSchema = z.object({
  body: z.string(),
  created_at: z.string(),
  from_name: z.string().nullable(),
  id: z.string(),
  recruiter_id: z.string(),
  subject: z.string(),
  type: emailSlackTypesSchema,
});

export const companyEmailTemplateInsertSchema = z.object({
  body: z.string(),
  created_at: z.string().optional(),
  from_name: z.string().optional().nullable(),
  id: z.string().optional(),
  recruiter_id: z.string().optional(),
  subject: z.string(),
  type: emailSlackTypesSchema,
});

export const companyEmailTemplateUpdateSchema = z.object({
  body: z.string().optional(),
  created_at: z.string().optional(),
  from_name: z.string().optional().nullable(),
  id: z.string().optional(),
  recruiter_id: z.string().optional(),
  subject: z.string().optional(),
  type: emailSlackTypesSchema.optional(),
});

export const companyEmailTemplateRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("company_email_template_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const companySearchCacheRowSchema = z.object({
  company_name: z.string(),
  created_at: z.string(),
  id: z.string(),
  search_result: jsonSchema,
  website_url: z.string().nullable(),
});

export const companySearchCacheInsertSchema = z.object({
  company_name: z.string(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  search_result: jsonSchema,
  website_url: z.string().optional().nullable(),
});

export const companySearchCacheUpdateSchema = z.object({
  company_name: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  search_result: jsonSchema.optional(),
  website_url: z.string().optional().nullable(),
});

export const companySearchCacheRelationshipsSchema = z.tuple([]);

export const departmentsRowSchema = z.object({
  id: z.number(),
  name: z.string(),
  recruiter_id: z.string(),
  remote_id: z.string().nullable(),
});

export const departmentsInsertSchema = z.object({
  id: z.number().optional(),
  name: z.string(),
  recruiter_id: z.string(),
  remote_id: z.string().optional().nullable(),
});

export const departmentsUpdateSchema = z.object({
  id: z.number().optional(),
  name: z.string().optional(),
  recruiter_id: z.string().optional(),
  remote_id: z.string().optional().nullable(),
});

export const departmentsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("fk_recruiter"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const integrationsRowSchema = z.object({
  ashby_key: z.string().nullable(),
  ashby_last_synced: z.string().nullable(),
  ashby_sync_token: z.string().nullable(),
  created_at: z.string(),
  domain_admin_email: z.string().nullable(),
  google_workspace_domain: z.string().nullable(),
  greenhouse_key: z.string().nullable(),
  greenhouse_metadata: jsonSchema.nullable(),
  id: z.string(),
  lever_key: z.string().nullable(),
  recruiter_id: z.string(),
  schedule_agent_email: z.string().nullable(),
  service_json: z.string().nullable(),
  twilio_phone_number: z.string().nullable(),
  zoom_auth: z.string().nullable(),
});

export const integrationsInsertSchema = z.object({
  ashby_key: z.string().optional().nullable(),
  ashby_last_synced: z.string().optional().nullable(),
  ashby_sync_token: z.string().optional().nullable(),
  created_at: z.string().optional(),
  domain_admin_email: z.string().optional().nullable(),
  google_workspace_domain: z.string().optional().nullable(),
  greenhouse_key: z.string().optional().nullable(),
  greenhouse_metadata: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  lever_key: z.string().optional().nullable(),
  recruiter_id: z.string(),
  schedule_agent_email: z.string().optional().nullable(),
  service_json: z.string().optional().nullable(),
  twilio_phone_number: z.string().optional().nullable(),
  zoom_auth: z.string().optional().nullable(),
});

export const integrationsUpdateSchema = z.object({
  ashby_key: z.string().optional().nullable(),
  ashby_last_synced: z.string().optional().nullable(),
  ashby_sync_token: z.string().optional().nullable(),
  created_at: z.string().optional(),
  domain_admin_email: z.string().optional().nullable(),
  google_workspace_domain: z.string().optional().nullable(),
  greenhouse_key: z.string().optional().nullable(),
  greenhouse_metadata: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  lever_key: z.string().optional().nullable(),
  recruiter_id: z.string().optional(),
  schedule_agent_email: z.string().optional().nullable(),
  service_json: z.string().optional().nullable(),
  twilio_phone_number: z.string().optional().nullable(),
  zoom_auth: z.string().optional().nullable(),
});

export const integrationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("integrations_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const interviewFilterJsonRowSchema = z.object({
  application_id: z.string(),
  confirmed_on: z.string().nullable(),
  created_at: z.string(),
  created_by: z.string().nullable(),
  filter_json: jsonSchema,
  id: z.string(),
  is_flow_agent: z.boolean(),
  request_id: z.string().nullable(),
  schedule_options: jsonSchema.nullable(),
  selected_options: z.array(jsonSchema).nullable(),
  session_ids: z.array(z.string()),
  viewed_on: z.string().nullable(),
});

export const interviewFilterJsonInsertSchema = z.object({
  application_id: z.string(),
  confirmed_on: z.string().optional().nullable(),
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  filter_json: jsonSchema,
  id: z.string().optional(),
  is_flow_agent: z.boolean().optional(),
  request_id: z.string().optional().nullable(),
  schedule_options: jsonSchema.optional().nullable(),
  selected_options: z.array(jsonSchema).optional().nullable(),
  session_ids: z.array(z.string()).optional(),
  viewed_on: z.string().optional().nullable(),
});

export const interviewFilterJsonUpdateSchema = z.object({
  application_id: z.string().optional(),
  confirmed_on: z.string().optional().nullable(),
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  filter_json: jsonSchema.optional(),
  id: z.string().optional(),
  is_flow_agent: z.boolean().optional(),
  request_id: z.string().optional().nullable(),
  schedule_options: jsonSchema.optional().nullable(),
  selected_options: z.array(jsonSchema).optional().nullable(),
  session_ids: z.array(z.string()).optional(),
  viewed_on: z.string().optional().nullable(),
});

export const interviewFilterJsonRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("interview_filter_json_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_status_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_filter_json_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_filter_json_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_filter_json_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("application_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_filter_json_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_filter_json_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_filter_json_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_filter_json_request_id_fkey"),
    columns: z.tuple([z.literal("request_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("request"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const meetingFlowSchema = z.union([
  z.literal("self_scheduling"),
  z.literal("candidate_request"),
  z.literal("debrief"),
  z.literal("mail_agent"),
  z.literal("phone_agent"),
  z.literal("hybrid"),
]);

export const interviewScheduleStatusSchema = z.union([
  z.literal("waiting"),
  z.literal("confirmed"),
  z.literal("completed"),
  z.literal("cancelled"),
  z.literal("reschedule"),
  z.literal("not_scheduled"),
]);

export const interviewMeetingInsertSchema = z.object({
  application_id: z.string(),
  cal_event_id: z.string().optional().nullable(),
  candidate_feedback: jsonSchema.optional().nullable(),
  confirmed_candidate_tz: z.string().optional().nullable(),
  confirmed_date: z.string().optional().nullable(),
  created_at: z.string().optional(),
  end_time: z.string().optional().nullable(),
  id: z.string().optional(),
  instructions: z.string().optional().nullable(),
  job_id: z.string(),
  meeting_flow: meetingFlowSchema.optional(),
  meeting_json: jsonSchema.optional().nullable(),
  meeting_link: z.string().optional().nullable(),
  organizer_id: z.string().optional().nullable(),
  recruiter_id: z.string(),
  schedule_request_id: z.string().optional().nullable(),
  start_time: z.string().optional().nullable(),
  status: interviewScheduleStatusSchema.optional(),
});

export const interviewMeetingUpdateSchema = z.object({
  application_id: z.string().optional(),
  cal_event_id: z.string().optional().nullable(),
  candidate_feedback: jsonSchema.optional().nullable(),
  confirmed_candidate_tz: z.string().optional().nullable(),
  confirmed_date: z.string().optional().nullable(),
  created_at: z.string().optional(),
  end_time: z.string().optional().nullable(),
  id: z.string().optional(),
  instructions: z.string().optional().nullable(),
  job_id: z.string().optional(),
  meeting_flow: meetingFlowSchema.optional(),
  meeting_json: jsonSchema.optional().nullable(),
  meeting_link: z.string().optional().nullable(),
  organizer_id: z.string().optional().nullable(),
  recruiter_id: z.string().optional(),
  schedule_request_id: z.string().optional().nullable(),
  start_time: z.string().optional().nullable(),
  status: interviewScheduleStatusSchema.optional(),
});

export const interviewMeetingRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("interview_meeting_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_status_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("application_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("job_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("public_jobs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_organizer_id_fkey"),
    columns: z.tuple([z.literal("organizer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_organizer_id_fkey"),
    columns: z.tuple([z.literal("organizer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_organizer_id_fkey"),
    columns: z.tuple([z.literal("organizer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const interviewMeetingLogRowSchema = z.object({
  created_at: z.string(),
  delta: jsonSchema,
  end_time: z.string().nullable(),
  id: z.number(),
  meeting_flow: z.string().nullable(),
  meeting_id: z.string().nullable(),
  organizer_id: z.string().nullable(),
  start_time: z.string().nullable(),
  status: z.string().nullable(),
});

export const interviewMeetingLogInsertSchema = z.object({
  created_at: z.string().optional(),
  delta: jsonSchema,
  end_time: z.string().optional().nullable(),
  id: z.number().optional(),
  meeting_flow: z.string().optional().nullable(),
  meeting_id: z.string().optional().nullable(),
  organizer_id: z.string().optional().nullable(),
  start_time: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
});

export const interviewMeetingLogUpdateSchema = z.object({
  created_at: z.string().optional(),
  delta: jsonSchema.optional(),
  end_time: z.string().optional().nullable(),
  id: z.number().optional(),
  meeting_flow: z.string().optional().nullable(),
  meeting_id: z.string().optional().nullable(),
  organizer_id: z.string().optional().nullable(),
  start_time: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
});

export const interviewMeetingLogRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("interview_meeting_log_meeting_id_fkey"),
    columns: z.tuple([z.literal("meeting_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_meeting"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_log_meeting_id_fkey"),
    columns: z.tuple([z.literal("meeting_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_details"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const interviewModuleRowSchema = z.object({
  created_at: z.string(),
  created_by: z.string().nullable(),
  department_id: z.number().nullable(),
  description: z.string().nullable(),
  duration_available: jsonSchema.nullable(),
  id: z.string(),
  instructions: z.string().nullable(),
  is_archived: z.boolean(),
  name: z.string(),
  recruiter_id: z.string(),
  settings: jsonSchema.nullable(),
});

export const interviewModuleInsertSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  department_id: z.number().optional().nullable(),
  description: z.string().optional().nullable(),
  duration_available: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  instructions: z.string().optional().nullable(),
  is_archived: z.boolean().optional(),
  name: z.string(),
  recruiter_id: z.string(),
  settings: jsonSchema.optional().nullable(),
});

export const interviewModuleUpdateSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  department_id: z.number().optional().nullable(),
  description: z.string().optional().nullable(),
  duration_available: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  instructions: z.string().optional().nullable(),
  is_archived: z.boolean().optional(),
  name: z.string().optional(),
  recruiter_id: z.string().optional(),
  settings: jsonSchema.optional().nullable(),
});

export const interviewModuleRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("interview_module_department_id_fkey"),
    columns: z.tuple([z.literal("department_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("departments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_panel_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_module_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_module_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_module_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const interviewModuleApproveUsersRowSchema = z.object({
  id: z.string(),
  module_id: z.string(),
  user_id: z.string(),
});

export const interviewModuleApproveUsersInsertSchema = z.object({
  id: z.string().optional(),
  module_id: z.string(),
  user_id: z.string(),
});

export const interviewModuleApproveUsersUpdateSchema = z.object({
  id: z.string().optional(),
  module_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const interviewModuleApproveUsersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("interview_module_approve_users_module_id_fkey"),
    columns: z.tuple([z.literal("module_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_module"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_module_approve_users_module_id_fkey"),
    columns: z.tuple([z.literal("module_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_types_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_module_approve_users_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_module_approve_users_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_module_approve_users_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const statusTrainingSchema = z.union([
  z.literal("qualified"),
  z.literal("training"),
]);

export const interviewModuleRelationInsertSchema = z.object({
  id: z.string().optional(),
  is_archived: z.boolean().optional(),
  module_id: z.string(),
  number_of_reverse_shadow: z.number().optional(),
  number_of_shadow: z.number().optional(),
  pause_json: jsonSchema.optional().nullable(),
  training_approver: z.string().optional().nullable(),
  training_status: statusTrainingSchema.optional(),
  user_id: z.string(),
});

export const interviewModuleRelationUpdateSchema = z.object({
  id: z.string().optional(),
  is_archived: z.boolean().optional(),
  module_id: z.string().optional(),
  number_of_reverse_shadow: z.number().optional(),
  number_of_shadow: z.number().optional(),
  pause_json: jsonSchema.optional().nullable(),
  training_approver: z.string().optional().nullable(),
  training_status: statusTrainingSchema.optional(),
  user_id: z.string().optional(),
});

export const interviewModuleRelationRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("interview_panel_relation_panel_id_fkey"),
    columns: z.tuple([z.literal("module_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_module"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_panel_relation_panel_id_fkey"),
    columns: z.tuple([z.literal("module_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_types_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_module_relation_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_module_relation_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_module_relation_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const interviewPlanRowSchema = z.object({
  application_id: z.string().nullable(),
  created_at: z.string(),
  id: z.string(),
  job_id: z.string().nullable(),
  name: z.string(),
  plan_order: z.number(),
  recruiter_id: z.string(),
});

export const interviewPlanInsertSchema = z.object({
  application_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  job_id: z.string().optional().nullable(),
  name: z.string().optional(),
  plan_order: z.number().optional(),
  recruiter_id: z.string(),
});

export const interviewPlanUpdateSchema = z.object({
  application_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  job_id: z.string().optional().nullable(),
  name: z.string().optional(),
  plan_order: z.number().optional(),
  recruiter_id: z.string().optional(),
});

export const interviewPlanRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("interview_plan_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_status_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_plan_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_plan_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_plan_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("application_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_plan_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_plan_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("job_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_plan_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("public_jobs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const interviewProgressRowSchema = z.object({
  application_id: z.string().nullable(),
  created_at: z.string(),
  description: z.string().nullable(),
  icon: z.string().nullable(),
  id: z.number(),
  is_completed: z.boolean().nullable(),
  job_id: z.string().nullable(),
  name: z.string().nullable(),
  order: z.number().nullable(),
  update_at: z.string().nullable(),
});

export const interviewProgressInsertSchema = z.object({
  application_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  icon: z.string().optional().nullable(),
  id: z.number().optional(),
  is_completed: z.boolean().optional().nullable(),
  job_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  order: z.number().optional().nullable(),
  update_at: z.string().optional().nullable(),
});

export const interviewProgressUpdateSchema = z.object({
  application_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  icon: z.string().optional().nullable(),
  id: z.number().optional(),
  is_completed: z.boolean().optional().nullable(),
  job_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  order: z.number().optional().nullable(),
  update_at: z.string().optional().nullable(),
});

export const interviewProgressRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("interview_progress_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_status_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_progress_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_progress_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_progress_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("application_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_progress_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("job_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_progress_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("public_jobs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const interviewScheduleTypeSchema = z.union([
  z.literal("in_person_meeting"),
  z.literal("google_meet"),
  z.literal("phone_call"),
  z.literal("zoom"),
]);

export const sessionTypeSchema = z.union([
  z.literal("panel"),
  z.literal("individual"),
  z.literal("debrief"),
]);

export const interviewSessionInsertSchema = z.object({
  break_duration: z.number().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  interview_plan_id: z.string().optional().nullable(),
  interviewer_cnt: z.number().optional(),
  location: z.string().optional().nullable(),
  meeting_id: z.string().optional().nullable(),
  members_meta: jsonSchema.optional(),
  module_id: z.string().optional().nullable(),
  name: z.string().optional(),
  parent_session_id: z.string().optional().nullable(),
  recruiter_id: z.string(),
  schedule_type: interviewScheduleTypeSchema.optional(),
  session_duration: z.number().optional(),
  session_order: z.number().optional(),
  session_type: sessionTypeSchema.optional(),
});

export const interviewSessionUpdateSchema = z.object({
  break_duration: z.number().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  interview_plan_id: z.string().optional().nullable(),
  interviewer_cnt: z.number().optional(),
  location: z.string().optional().nullable(),
  meeting_id: z.string().optional().nullable(),
  members_meta: jsonSchema.optional(),
  module_id: z.string().optional().nullable(),
  name: z.string().optional(),
  parent_session_id: z.string().optional().nullable(),
  recruiter_id: z.string().optional(),
  schedule_type: interviewScheduleTypeSchema.optional(),
  session_duration: z.number().optional(),
  session_order: z.number().optional(),
  session_type: sessionTypeSchema.optional(),
});

export const interviewSessionRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("interview_session_parent_session_id_fkey"),
    columns: z.tuple([z.literal("parent_session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_parent_session_id_fkey"),
    columns: z.tuple([z.literal("parent_session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_session"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_parent_session_id_fkey"),
    columns: z.tuple([z.literal("parent_session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_details"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_parent_session_id_fkey"),
    columns: z.tuple([z.literal("parent_session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_interview_session_interview_plan_id_fkey",
    ),
    columns: z.tuple([z.literal("interview_plan_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_plan"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_session_meeting_id_fkey"),
    columns: z.tuple([z.literal("meeting_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_meeting"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_session_meeting_id_fkey"),
    columns: z.tuple([z.literal("meeting_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_details"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_session_module_id_fkey"),
    columns: z.tuple([z.literal("module_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_module"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_session_module_id_fkey"),
    columns: z.tuple([z.literal("module_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_types_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const cancelTypeSchema = z.union([
  z.literal("reschedule"),
  z.literal("declined"),
]);

export const interviewSessionCancelInsertSchema = z.object({
  application_id: z.string().optional().nullable(),
  cancel_user_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_ignored: z.boolean().optional(),
  is_resolved: z.boolean().optional(),
  other_details: jsonSchema.optional().nullable(),
  reason: z.string(),
  request_id: z.string().optional().nullable(),
  session_id: z.string(),
  session_relation_id: z.string().optional().nullable(),
  type: cancelTypeSchema.optional(),
});

export const interviewSessionCancelUpdateSchema = z.object({
  application_id: z.string().optional().nullable(),
  cancel_user_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_ignored: z.boolean().optional(),
  is_resolved: z.boolean().optional(),
  other_details: jsonSchema.optional().nullable(),
  reason: z.string().optional(),
  request_id: z.string().optional().nullable(),
  session_id: z.string().optional(),
  session_relation_id: z.string().optional().nullable(),
  type: cancelTypeSchema.optional(),
});

export const interviewSessionCancelRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("interview_session_cancel_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_status_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_cancel_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_cancel_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_cancel_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("application_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_cancel_cancel_user_id_fkey"),
    columns: z.tuple([z.literal("cancel_user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_cancel_cancel_user_id_fkey"),
    columns: z.tuple([z.literal("cancel_user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_cancel_cancel_user_id_fkey"),
    columns: z.tuple([z.literal("cancel_user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_cancel_request_id_fkey"),
    columns: z.tuple([z.literal("request_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("request"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_cancel_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_cancel_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_session"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_cancel_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_details"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_cancel_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "interview_session_cancel_session_relation_id_fkey",
    ),
    columns: z.tuple([z.literal("session_relation_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_session_relation"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "interview_session_cancel_session_relation_id_fkey",
    ),
    columns: z.tuple([z.literal("session_relation_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_relation_id")]),
  }),
]);

export const sessionAcceptedStatusSchema = z.union([
  z.literal("waiting"),
  z.literal("accepted"),
  z.literal("declined"),
  z.literal("request_reschedule"),
]);

export const interviewerTypeSchema = z.union([
  z.literal("qualified"),
  z.literal("shadow"),
  z.literal("reverse_shadow"),
]);

export const interviewSessionRelationInsertSchema = z.object({
  accepted_status: sessionAcceptedStatusSchema.optional(),
  feedback: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  interview_module_relation_id: z.string().optional().nullable(),
  interviewer_type: statusTrainingSchema.optional(),
  is_confirmed: z.boolean().optional(),
  session_id: z.string(),
  training_type: interviewerTypeSchema.optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const interviewSessionRelationUpdateSchema = z.object({
  accepted_status: sessionAcceptedStatusSchema.optional(),
  feedback: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  interview_module_relation_id: z.string().optional().nullable(),
  interviewer_type: statusTrainingSchema.optional(),
  is_confirmed: z.boolean().optional(),
  session_id: z.string().optional(),
  training_type: interviewerTypeSchema.optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const interviewSessionRelationRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "public_interview_session_relation_interview_module_relation_id_",
    ),
    columns: z.tuple([z.literal("interview_module_relation_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_module_relation"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_interview_session_relation_interview_module_relation_id_",
    ),
    columns: z.tuple([z.literal("interview_module_relation_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("module_relations_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_session_relation_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_session_relation_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_session_relation_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_inteview_session_relation_session_id_fkey",
    ),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_inteview_session_relation_session_id_fkey",
    ),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_session"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_inteview_session_relation_session_id_fkey",
    ),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_details"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_inteview_session_relation_session_id_fkey",
    ),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
]);

export const interviewTrainingProgressRowSchema = z.object({
  approved_user_id: z.string().nullable(),
  created_at: z.string(),
  id: z.string(),
  is_approved: z.boolean(),
  is_attended: z.boolean(),
  session_relation_id: z.string(),
});

export const interviewTrainingProgressInsertSchema = z.object({
  approved_user_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_approved: z.boolean().optional(),
  is_attended: z.boolean().optional(),
  session_relation_id: z.string(),
});

export const interviewTrainingProgressUpdateSchema = z.object({
  approved_user_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_approved: z.boolean().optional(),
  is_attended: z.boolean().optional(),
  session_relation_id: z.string().optional(),
});

export const interviewTrainingProgressRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "interview_training_progress_approved_user_id_fkey",
    ),
    columns: z.tuple([z.literal("approved_user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "interview_training_progress_approved_user_id_fkey",
    ),
    columns: z.tuple([z.literal("approved_user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "interview_training_progress_approved_user_id_fkey",
    ),
    columns: z.tuple([z.literal("approved_user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "interview_training_progress_session_relation_id_fkey",
    ),
    columns: z.tuple([z.literal("session_relation_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_session_relation"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "interview_training_progress_session_relation_id_fkey",
    ),
    columns: z.tuple([z.literal("session_relation_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_relation_id")]),
  }),
]);

export const jobEmailTemplateRowSchema = z.object({
  body: z.string().nullable(),
  created_at: z.string(),
  from_name: z.string().nullable(),
  id: z.string(),
  job_id: z.string(),
  subject: z.string().nullable(),
  type: emailSlackTypesSchema,
});

export const jobEmailTemplateInsertSchema = z.object({
  body: z.string().optional().nullable(),
  created_at: z.string().optional(),
  from_name: z.string().optional().nullable(),
  id: z.string().optional(),
  job_id: z.string(),
  subject: z.string().optional().nullable(),
  type: emailSlackTypesSchema,
});

export const jobEmailTemplateUpdateSchema = z.object({
  body: z.string().optional().nullable(),
  created_at: z.string().optional(),
  from_name: z.string().optional().nullable(),
  id: z.string().optional(),
  job_id: z.string().optional(),
  subject: z.string().optional().nullable(),
  type: emailSlackTypesSchema.optional(),
});

export const jobEmailTemplateRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("job_email_template_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("job_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("job_email_template_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("public_jobs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const logsRowSchema = z.object({
  created_at: z.string(),
  id: z.number(),
  message: z.string().nullable(),
  meta: jsonSchema.nullable(),
  method: z.string().nullable(),
  name: z.string(),
  parent_log_id: z.number().nullable(),
  recruiter_id: z.string().nullable(),
  status: z.string(),
  type: z.string(),
  user_id: z.string().nullable(),
});

export const logsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  message: z.string().optional().nullable(),
  meta: jsonSchema.optional().nullable(),
  method: z.string().optional().nullable(),
  name: z.string(),
  parent_log_id: z.number().optional().nullable(),
  recruiter_id: z.string().optional().nullable(),
  status: z.string(),
  type: z.string(),
  user_id: z.string().optional().nullable(),
});

export const logsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  message: z.string().optional().nullable(),
  meta: jsonSchema.optional().nullable(),
  method: z.string().optional().nullable(),
  name: z.string().optional(),
  parent_log_id: z.number().optional().nullable(),
  recruiter_id: z.string().optional().nullable(),
  status: z.string().optional(),
  type: z.string().optional(),
  user_id: z.string().optional().nullable(),
});

export const logsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("logs_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("logs_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("logs_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("logs_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const taskAgentTypeSchema = z.union([
  z.literal("phone"),
  z.literal("email"),
  z.literal("job"),
]);

export const taskPrioritySchema = z.union([
  z.literal("high"),
  z.literal("low"),
  z.literal("medium"),
]);

export const taskStatusSchema = z.union([
  z.literal("pending"),
  z.literal("in_progress"),
  z.literal("completed"),
  z.literal("closed"),
  z.literal("not_started"),
  z.literal("scheduled"),
  z.literal("cancelled"),
  z.literal("overdue"),
  z.literal("on_hold"),
  z.literal("failed"),
]);

export const taskTypeEnumSchema = z.union([
  z.literal("schedule"),
  z.literal("training"),
  z.literal("empty"),
  z.literal("availability"),
  z.literal("self_schedule"),
]);

export const newTasksInsertSchema = z.object({
  agent: taskAgentTypeSchema.optional().nullable(),
  application_id: z.string().optional().nullable(),
  assignee: z.array(z.string()),
  created_at: z.string().optional(),
  created_by: z.string(),
  due_date: z.string().optional().nullable(),
  filter_id: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  priority: taskPrioritySchema.optional(),
  recruiter_id: z.string().optional().nullable(),
  request_availability_id: z.string().optional().nullable(),
  schedule_date_range: jsonSchema.optional().nullable(),
  start_date: z.string().optional().nullable(),
  status: taskStatusSchema.optional(),
  task_action: jsonSchema.optional().nullable(),
  task_owner: z.string().optional().nullable(),
  trigger_count: z.number().optional(),
  type: taskTypeEnumSchema.optional().nullable(),
});

export const newTasksUpdateSchema = z.object({
  agent: taskAgentTypeSchema.optional().nullable(),
  application_id: z.string().optional().nullable(),
  assignee: z.array(z.string()).optional(),
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  due_date: z.string().optional().nullable(),
  filter_id: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  priority: taskPrioritySchema.optional(),
  recruiter_id: z.string().optional().nullable(),
  request_availability_id: z.string().optional().nullable(),
  schedule_date_range: jsonSchema.optional().nullable(),
  start_date: z.string().optional().nullable(),
  status: taskStatusSchema.optional(),
  task_action: jsonSchema.optional().nullable(),
  task_owner: z.string().optional().nullable(),
  trigger_count: z.number().optional(),
  type: taskTypeEnumSchema.optional().nullable(),
});

export const newTasksRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("new_tasks_request_availability_id_fkey"),
    columns: z.tuple([z.literal("request_availability_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_request_availability"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_status_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("application_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_cretaed_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_cretaed_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_cretaed_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_filter_id_fkey"),
    columns: z.tuple([z.literal("filter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_filter_json"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const progressTypeSchema = z.union([
  z.literal("standard"),
  z.literal("interview_schedule"),
  z.literal("email_messages"),
  z.literal("call_completed"),
  z.literal("call_failed"),
  z.literal("email_failed"),
  z.literal("call_disconnected"),
  z.literal("email_follow_up"),
  z.literal("call_follow_up"),
  z.literal("email_follow_up_reminder"),
  z.literal("call_follow_up_reminder"),
  z.literal("request_availability_list"),
  z.literal("request_availability"),
  z.literal("self_schedule"),
  z.literal("send_email"),
  z.literal("request_submitted"),
  z.literal("schedule"),
  z.literal("closed"),
  z.literal("completed"),
]);

export const newTasksProgressInsertSchema = z.object({
  created_at: z.string().optional(),
  created_by: jsonSchema,
  id: z.string().optional(),
  jsonb_data: jsonSchema.optional().nullable(),
  progress_type: progressTypeSchema.optional(),
  task_id: z.string(),
  title: z.string(),
  title_meta: jsonSchema.optional().nullable(),
});

export const newTasksProgressUpdateSchema = z.object({
  created_at: z.string().optional(),
  created_by: jsonSchema.optional(),
  id: z.string().optional(),
  jsonb_data: jsonSchema.optional().nullable(),
  progress_type: progressTypeSchema.optional(),
  task_id: z.string().optional(),
  title: z.string().optional(),
  title_meta: jsonSchema.optional().nullable(),
});

export const newTasksProgressRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_new_tasks_progress_task_id_fkey"),
    columns: z.tuple([z.literal("task_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("new_tasks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_progress_task_id_fkey"),
    columns: z.tuple([z.literal("task_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tasks_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const notifyMeRowSchema = z.object({
  created_at: z.string().nullable(),
  email: z.string(),
  id: z.string(),
  job_id: z.string().nullable(),
  job_title: z.string().nullable(),
});

export const notifyMeInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  email: z.string(),
  id: z.string().optional(),
  job_id: z.string().optional().nullable(),
  job_title: z.string().optional().nullable(),
});

export const notifyMeUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  email: z.string().optional(),
  id: z.string().optional(),
  job_id: z.string().optional().nullable(),
  job_title: z.string().optional().nullable(),
});

export const notifyMeRelationshipsSchema = z.tuple([]);

export const officeLocationsRowSchema = z.object({
  city: z.string(),
  country: z.string(),
  id: z.number(),
  is_headquarter: z.boolean(),
  line1: z.string(),
  line2: z.string().nullable(),
  name: z.string().nullable(),
  recruiter_id: z.string(),
  region: z.string(),
  remote_id: z.string().nullable(),
  timezone: z.string(),
  zipcode: z.string().nullable(),
});

export const officeLocationsInsertSchema = z.object({
  city: z.string(),
  country: z.string(),
  id: z.number().optional(),
  is_headquarter: z.boolean(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  recruiter_id: z.string(),
  region: z.string(),
  remote_id: z.string().optional().nullable(),
  timezone: z.string(),
  zipcode: z.string().optional().nullable(),
});

export const officeLocationsUpdateSchema = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  id: z.number().optional(),
  is_headquarter: z.boolean().optional(),
  line1: z.string().optional(),
  line2: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  recruiter_id: z.string().optional(),
  region: z.string().optional(),
  remote_id: z.string().optional().nullable(),
  timezone: z.string().optional(),
  zipcode: z.string().optional().nullable(),
});

export const officeLocationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("fk_recruiter"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const outreachedEmailsRowSchema = z.object({
  candidate_id: z.string(),
  email: jsonSchema,
  email_sent: z.boolean(),
  id: z.number(),
  recruiter_user_id: z.string(),
});

export const outreachedEmailsInsertSchema = z.object({
  candidate_id: z.string(),
  email: jsonSchema.optional(),
  email_sent: z.boolean().optional(),
  id: z.number().optional(),
  recruiter_user_id: z.string(),
});

export const outreachedEmailsUpdateSchema = z.object({
  candidate_id: z.string().optional(),
  email: jsonSchema.optional(),
  email_sent: z.boolean().optional(),
  id: z.number().optional(),
  recruiter_user_id: z.string().optional(),
});

export const outreachedEmailsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("outreached_emails_recruiter_user_id_fkey"),
    columns: z.tuple([z.literal("recruiter_user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("outreached_emails_recruiter_user_id_fkey"),
    columns: z.tuple([z.literal("recruiter_user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("outreached_emails_recruiter_user_id_fkey"),
    columns: z.tuple([z.literal("recruiter_user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const permissionsRowSchema = z.object({
  created_at: z.string().nullable(),
  description: z.string().nullable(),
  id: z.number(),
  is_enable: z.boolean().nullable(),
  meta: jsonSchema.nullable(),
  name: z.string(),
  title: z.string(),
});

export const permissionsInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  is_enable: z.boolean().optional().nullable(),
  meta: jsonSchema.optional().nullable(),
  name: z.string(),
  title: z.string(),
});

export const permissionsUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  is_enable: z.boolean().optional().nullable(),
  meta: jsonSchema.optional().nullable(),
  name: z.string().optional(),
  title: z.string().optional(),
});

export const permissionsRelationshipsSchema = z.tuple([]);

export const publicJobTypeSchema = z.union([
  z.literal("contract"),
  z.literal("full time"),
  z.literal("part time"),
  z.literal("temporary"),
  z.literal("volunteer"),
  z.literal("internship"),
]);

export const publicJobStatusSchema = z.union([
  z.literal("draft"),
  z.literal("published"),
  z.literal("closed"),
]);

export const publicJobWorkplaceSchema = z.union([
  z.literal("hybrid"),
  z.literal("on site"),
  z.literal("off site"),
]);

export const publicJobsInsertSchema = z.object({
  active_status: jsonSchema.optional(),
  created_at: z.string().optional(),
  department_id: z.number().optional().nullable(),
  description: z.string().optional().nullable(),
  draft: jsonSchema.optional().nullable(),
  hiring_manager: z.string().optional().nullable(),
  id: z.string().optional(),
  interview_coordinator: z.string().optional().nullable(),
  interview_plan_warning_ignore: z.boolean().optional(),
  interview_session_warning_ignore: z.boolean().optional(),
  is_ats_sync: z.boolean().optional(),
  is_pinned: z.boolean().optional(),
  jd_changed: z.boolean().optional().nullable(),
  jd_json: jsonSchema.optional().nullable(),
  job_criteria: jsonSchema.optional().nullable(),
  job_title: z.string(),
  job_type: publicJobTypeSchema.optional().nullable(),
  location_id: z.number().optional().nullable(),
  new_screening_setting: jsonSchema.optional(),
  parameter_weights: jsonSchema.optional(),
  posted_by: z.string().optional(),
  recruiter: z.string().optional().nullable(),
  recruiter_id: z.string(),
  recruiting_coordinator: z.string().optional().nullable(),
  remote_id: z.string().optional().nullable(),
  remote_sync_time: z.string().optional().nullable(),
  scoring_criteria_loading: z.boolean().optional(),
  screening_setting: jsonSchema.optional().nullable(),
  slug: z.string().optional(),
  sourcer: z.string().optional().nullable(),
  status: publicJobStatusSchema.optional(),
  updated_at: z.string().optional().nullable(),
  workplace_type: publicJobWorkplaceSchema.optional().nullable(),
});

export const publicJobsUpdateSchema = z.object({
  active_status: jsonSchema.optional(),
  created_at: z.string().optional(),
  department_id: z.number().optional().nullable(),
  description: z.string().optional().nullable(),
  draft: jsonSchema.optional().nullable(),
  hiring_manager: z.string().optional().nullable(),
  id: z.string().optional(),
  interview_coordinator: z.string().optional().nullable(),
  interview_plan_warning_ignore: z.boolean().optional(),
  interview_session_warning_ignore: z.boolean().optional(),
  is_ats_sync: z.boolean().optional(),
  is_pinned: z.boolean().optional(),
  jd_changed: z.boolean().optional().nullable(),
  jd_json: jsonSchema.optional().nullable(),
  job_criteria: jsonSchema.optional().nullable(),
  job_title: z.string().optional(),
  job_type: publicJobTypeSchema.optional().nullable(),
  location_id: z.number().optional().nullable(),
  new_screening_setting: jsonSchema.optional(),
  parameter_weights: jsonSchema.optional(),
  posted_by: z.string().optional(),
  recruiter: z.string().optional().nullable(),
  recruiter_id: z.string().optional(),
  recruiting_coordinator: z.string().optional().nullable(),
  remote_id: z.string().optional().nullable(),
  remote_sync_time: z.string().optional().nullable(),
  scoring_criteria_loading: z.boolean().optional(),
  screening_setting: jsonSchema.optional().nullable(),
  slug: z.string().optional(),
  sourcer: z.string().optional().nullable(),
  status: publicJobStatusSchema.optional(),
  updated_at: z.string().optional().nullable(),
  workplace_type: publicJobWorkplaceSchema.optional().nullable(),
});

export const publicJobsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_jobs_department_id_fkey"),
    columns: z.tuple([z.literal("department_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("departments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_hiring_manager_fkey"),
    columns: z.tuple([z.literal("hiring_manager")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_hiring_manager_fkey"),
    columns: z.tuple([z.literal("hiring_manager")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_hiring_manager_fkey"),
    columns: z.tuple([z.literal("hiring_manager")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_interview_coordinator_fkey"),
    columns: z.tuple([z.literal("interview_coordinator")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_interview_coordinator_fkey"),
    columns: z.tuple([z.literal("interview_coordinator")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_interview_coordinator_fkey"),
    columns: z.tuple([z.literal("interview_coordinator")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_location_id_fkey"),
    columns: z.tuple([z.literal("location_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("office_locations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_recruiter_fkey"),
    columns: z.tuple([z.literal("recruiter")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_recruiter_fkey"),
    columns: z.tuple([z.literal("recruiter")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_recruiter_fkey"),
    columns: z.tuple([z.literal("recruiter")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_recruiting_coordinator_fkey"),
    columns: z.tuple([z.literal("recruiting_coordinator")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_recruiting_coordinator_fkey"),
    columns: z.tuple([z.literal("recruiting_coordinator")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_recruiting_coordinator_fkey"),
    columns: z.tuple([z.literal("recruiting_coordinator")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_sourcer_fkey"),
    columns: z.tuple([z.literal("sourcer")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_sourcer_fkey"),
    columns: z.tuple([z.literal("sourcer")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_sourcer_fkey"),
    columns: z.tuple([z.literal("sourcer")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const questionLevelSchema = z.union([
  z.literal("basic"),
  z.literal("intermediate"),
  z.literal("advanced"),
]);

export const questionTypeSchema = z.union([
  z.literal("scq"),
  z.literal("mcq"),
  z.literal("qna"),
  z.literal("code"),
]);

export const questionBankInsertSchema = z.object({
  answer: jsonSchema.optional().nullable(),
  created_at: z.string().optional(),
  description: jsonSchema.optional().nullable(),
  duration: z.number().optional().nullable(),
  embeddings: z.string().optional().nullable(),
  id: z.string().optional(),
  level: questionLevelSchema.optional().nullable(),
  question: jsonSchema.optional().nullable(),
  required: z.boolean().optional(),
  type: questionTypeSchema.optional(),
});

export const questionBankUpdateSchema = z.object({
  answer: jsonSchema.optional().nullable(),
  created_at: z.string().optional(),
  description: jsonSchema.optional().nullable(),
  duration: z.number().optional().nullable(),
  embeddings: z.string().optional().nullable(),
  id: z.string().optional(),
  level: questionLevelSchema.optional().nullable(),
  question: jsonSchema.optional().nullable(),
  required: z.boolean().optional(),
  type: questionTypeSchema.optional(),
});

export const questionBankRelationshipsSchema = z.tuple([]);

export const recruiterRowSchema = z.object({
  company_overview: z.string().nullable(),
  company_website: z.string().nullable(),
  created_at: z.string(),
  e_o_statement: z.string().nullable(),
  email: z.string().nullable(),
  employee_size: z.string().nullable(),
  employment_type: jsonSchema,
  hr_contact: jsonSchema.nullable(),
  id: z.string(),
  industry: z.string().nullable(),
  logo: z.string().nullable(),
  m_v_statement: z.string().nullable(),
  name: z.string(),
  phone_number: z.string().nullable(),
  primary_admin: z.string(),
  primary_contact: jsonSchema.nullable(),
  recruiter_type: z.string().nullable(),
  scheduling_reason: jsonSchema.nullable(),
  scheduling_settings: jsonSchema.nullable(),
  socials: jsonSchema.nullable(),
  workplace_type: jsonSchema,
});

export const recruiterInsertSchema = z.object({
  company_overview: z.string().optional().nullable(),
  company_website: z.string().optional().nullable(),
  created_at: z.string().optional(),
  e_o_statement: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  employee_size: z.string().optional().nullable(),
  employment_type: jsonSchema.optional(),
  hr_contact: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  industry: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  m_v_statement: z.string().optional().nullable(),
  name: z.string(),
  phone_number: z.string().optional().nullable(),
  primary_admin: z.string(),
  primary_contact: jsonSchema.optional().nullable(),
  recruiter_type: z.string().optional().nullable(),
  scheduling_reason: jsonSchema.optional().nullable(),
  scheduling_settings: jsonSchema.optional().nullable(),
  socials: jsonSchema.optional().nullable(),
  workplace_type: jsonSchema.optional(),
});

export const recruiterUpdateSchema = z.object({
  company_overview: z.string().optional().nullable(),
  company_website: z.string().optional().nullable(),
  created_at: z.string().optional(),
  e_o_statement: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  employee_size: z.string().optional().nullable(),
  employment_type: jsonSchema.optional(),
  hr_contact: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  industry: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  m_v_statement: z.string().optional().nullable(),
  name: z.string().optional(),
  phone_number: z.string().optional().nullable(),
  primary_admin: z.string().optional(),
  primary_contact: jsonSchema.optional().nullable(),
  recruiter_type: z.string().optional().nullable(),
  scheduling_reason: jsonSchema.optional().nullable(),
  scheduling_settings: jsonSchema.optional().nullable(),
  socials: jsonSchema.optional().nullable(),
  workplace_type: jsonSchema.optional(),
});

export const recruiterRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("recruiter_primary_admin_fkey"),
    columns: z.tuple([z.literal("primary_admin")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("recruiter_primary_admin_fkey"),
    columns: z.tuple([z.literal("primary_admin")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("recruiter_primary_admin_fkey"),
    columns: z.tuple([z.literal("primary_admin")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const recruiterPreferencesRowSchema = z.object({
  about: z.string().nullable(),
  agent: z.boolean(),
  analytics: z.boolean(),
  ats: z.string(),
  banner_image: z.string().nullable(),
  candidate_portal: z.boolean(),
  company_images: z.array(z.string()).nullable(),
  greetings: z.string().nullable(),
  integrations: z.boolean(),
  recruiter_id: z.string(),
  reports: z.boolean(),
  request: z.boolean(),
  roles: z.boolean().nullable(),
  scheduling: z.boolean(),
  scoring: z.boolean(),
  themes: z.boolean(),
  workflow: z.boolean(),
});

export const recruiterPreferencesInsertSchema = z.object({
  about: z.string().optional().nullable(),
  agent: z.boolean().optional(),
  analytics: z.boolean().optional(),
  ats: z.string().optional(),
  banner_image: z.string().optional().nullable(),
  candidate_portal: z.boolean().optional(),
  company_images: z.array(z.string()).optional().nullable(),
  greetings: z.string().optional().nullable(),
  integrations: z.boolean().optional(),
  recruiter_id: z.string(),
  reports: z.boolean().optional(),
  request: z.boolean().optional(),
  roles: z.boolean().optional().nullable(),
  scheduling: z.boolean().optional(),
  scoring: z.boolean().optional(),
  themes: z.boolean().optional(),
  workflow: z.boolean().optional(),
});

export const recruiterPreferencesUpdateSchema = z.object({
  about: z.string().optional().nullable(),
  agent: z.boolean().optional(),
  analytics: z.boolean().optional(),
  ats: z.string().optional(),
  banner_image: z.string().optional().nullable(),
  candidate_portal: z.boolean().optional(),
  company_images: z.array(z.string()).optional().nullable(),
  greetings: z.string().optional().nullable(),
  integrations: z.boolean().optional(),
  recruiter_id: z.string().optional(),
  reports: z.boolean().optional(),
  request: z.boolean().optional(),
  roles: z.boolean().optional().nullable(),
  scheduling: z.boolean().optional(),
  scoring: z.boolean().optional(),
  themes: z.boolean().optional(),
  workflow: z.boolean().optional(),
});

export const recruiterPreferencesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("recuriter_preferences_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const userRolesSchema = z.union([
  z.literal("admin"),
  z.literal("recruiter"),
  z.literal("interviewer"),
  z.literal("recruiting_coordinator"),
  z.literal("sourcer"),
  z.literal("hiring_manager"),
]);

export const recruiterRelationInsertSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  id: z.number().optional(),
  is_active: z.boolean().optional(),
  manager_id: z.string().optional().nullable(),
  recruiter_id: z.string(),
  role: userRolesSchema,
  role_id: z.string().optional().nullable(),
  user_id: z.string(),
});

export const recruiterRelationUpdateSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  id: z.number().optional(),
  is_active: z.boolean().optional(),
  manager_id: z.string().optional().nullable(),
  recruiter_id: z.string().optional(),
  role: userRolesSchema.optional(),
  role_id: z.string().optional().nullable(),
  user_id: z.string().optional(),
});

export const recruiterRelationRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_recruiter_relation_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_recruiter_relation_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_recruiter_relation_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("recruiter_relation_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("recruiter_relation_manager_id_fkey"),
    columns: z.tuple([z.literal("manager_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("recruiter_relation_manager_id_fkey"),
    columns: z.tuple([z.literal("manager_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("recruiter_relation_manager_id_fkey"),
    columns: z.tuple([z.literal("manager_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("recruiter_relation_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("recruiter_relation_role_id_fkey"),
    columns: z.tuple([z.literal("role_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("roles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const employmentTypeEnumSchema = z.union([
  z.literal("fulltime"),
  z.literal("parttime"),
  z.literal("contractor"),
]);

export const recruiterUserInsertSchema = z.object({
  calendar_sync: jsonSchema.optional().nullable(),
  calendar_sync_token: z.string().optional().nullable(),
  created_at: z.string().optional(),
  department_id: z.number().optional().nullable(),
  email: z.string(),
  email_auth: jsonSchema.optional().nullable(),
  email_outreach_templates: z.array(jsonSchema).optional().nullable(),
  employment: employmentTypeEnumSchema.optional(),
  first_name: z.string(),
  is_calendar_connected: z.boolean().optional(),
  joined_at: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  linked_in: z.string().optional().nullable(),
  office_location_id: z.number().optional().nullable(),
  phone: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  profile_image: z.string().optional().nullable(),
  remote_id: z.string().optional().nullable(),
  schedule_auth: jsonSchema.optional().nullable(),
  scheduling_settings: jsonSchema.optional().nullable(),
  status: z.string(),
  user_id: z.string(),
});

export const recruiterUserUpdateSchema = z.object({
  calendar_sync: jsonSchema.optional().nullable(),
  calendar_sync_token: z.string().optional().nullable(),
  created_at: z.string().optional(),
  department_id: z.number().optional().nullable(),
  email: z.string().optional(),
  email_auth: jsonSchema.optional().nullable(),
  email_outreach_templates: z.array(jsonSchema).optional().nullable(),
  employment: employmentTypeEnumSchema.optional(),
  first_name: z.string().optional(),
  is_calendar_connected: z.boolean().optional(),
  joined_at: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  linked_in: z.string().optional().nullable(),
  office_location_id: z.number().optional().nullable(),
  phone: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  profile_image: z.string().optional().nullable(),
  remote_id: z.string().optional().nullable(),
  schedule_auth: jsonSchema.optional().nullable(),
  scheduling_settings: jsonSchema.optional().nullable(),
  status: z.string().optional(),
  user_id: z.string().optional(),
});

export const recruiterUserRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("recruiter_user_department_id_fkey"),
    columns: z.tuple([z.literal("department_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("departments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("recruiter_user_office_location_id_fkey"),
    columns: z.tuple([z.literal("office_location_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("office_locations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("recruiter_user_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const requestRowSchema = z.object({
  application_id: z.string().nullable(),
  assignee_id: z.string().nullable(),
  assigner_id: z.string().nullable(),
  completed_at: z.string().nullable(),
  created_at: z.string(),
  id: z.string(),
  is_new: z.boolean(),
  priority: z.string(),
  schedule_end_date: z.string().nullable(),
  schedule_start_date: z.string().nullable(),
  status: z.string(),
  title: z.string().nullable(),
  type: z.string(),
  updated_at: z.string(),
});

export const requestInsertSchema = z.object({
  application_id: z.string().optional().nullable(),
  assignee_id: z.string().optional().nullable(),
  assigner_id: z.string().optional().nullable(),
  completed_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_new: z.boolean().optional(),
  priority: z.string().optional(),
  schedule_end_date: z.string().optional().nullable(),
  schedule_start_date: z.string().optional().nullable(),
  status: z.string().optional(),
  title: z.string().optional().nullable(),
  type: z.string(),
  updated_at: z.string().optional(),
});

export const requestUpdateSchema = z.object({
  application_id: z.string().optional().nullable(),
  assignee_id: z.string().optional().nullable(),
  assigner_id: z.string().optional().nullable(),
  completed_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_new: z.boolean().optional(),
  priority: z.string().optional(),
  schedule_end_date: z.string().optional().nullable(),
  schedule_start_date: z.string().optional().nullable(),
  status: z.string().optional(),
  title: z.string().optional().nullable(),
  type: z.string().optional(),
  updated_at: z.string().optional(),
});

export const requestRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("request_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_status_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("application_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_assignee_id_fkey"),
    columns: z.tuple([z.literal("assignee_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_assignee_id_fkey"),
    columns: z.tuple([z.literal("assignee_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_assignee_id_fkey"),
    columns: z.tuple([z.literal("assignee_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_assigner_id_fkey"),
    columns: z.tuple([z.literal("assigner_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_assigner_id_fkey"),
    columns: z.tuple([z.literal("assigner_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_assigner_id_fkey"),
    columns: z.tuple([z.literal("assigner_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const requestIntegrationToolRowSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.number(),
  recruiter_id: z.string().nullable(),
  tool_name: z.string().nullable(),
});

export const requestIntegrationToolInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  recruiter_id: z.string().optional().nullable(),
  tool_name: z.string().optional().nullable(),
});

export const requestIntegrationToolUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  recruiter_id: z.string().optional().nullable(),
  tool_name: z.string().optional().nullable(),
});

export const requestIntegrationToolRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("request_integration_tool_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const requestLogRowSchema = z.object({
  assignee_id: z.string().nullable(),
  created_at: z.string(),
  delta: jsonSchema,
  id: z.number(),
  priority: z.string().nullable(),
  request_id: z.string(),
  status: z.string().nullable(),
  type: z.string().nullable(),
});

export const requestLogInsertSchema = z.object({
  assignee_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  delta: jsonSchema,
  id: z.number().optional(),
  priority: z.string().optional().nullable(),
  request_id: z.string(),
  status: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
});

export const requestLogUpdateSchema = z.object({
  assignee_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  delta: jsonSchema.optional(),
  id: z.number().optional(),
  priority: z.string().optional().nullable(),
  request_id: z.string().optional(),
  status: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
});

export const requestLogRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("request_log_request_id_fkey"),
    columns: z.tuple([z.literal("request_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("request"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const requestNoteRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  note: z.string().nullable(),
  pinned: z.boolean().nullable(),
  request_id: z.string().nullable(),
  updated_at: z.string().nullable(),
});

export const requestNoteInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  note: z.string().optional().nullable(),
  pinned: z.boolean().optional().nullable(),
  request_id: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const requestNoteUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  note: z.string().optional().nullable(),
  pinned: z.boolean().optional().nullable(),
  request_id: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const requestNoteRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("request_note_request_id_fkey"),
    columns: z.tuple([z.literal("request_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("request"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const requestProgressRowSchema = z.object({
  created_at: z.string(),
  event_type: z.string(),
  id: z.string(),
  is_progress_step: z.boolean(),
  log: z.string().nullable(),
  meta: jsonSchema.nullable(),
  request_id: z.string(),
  status: z.string(),
  target_api: emailSlackTypesSchema.nullable(),
  updated_at: z.string(),
});

export const requestProgressInsertSchema = z.object({
  created_at: z.string().optional(),
  event_type: z.string(),
  id: z.string().optional(),
  is_progress_step: z.boolean().optional(),
  log: z.string().optional().nullable(),
  meta: jsonSchema.optional().nullable(),
  request_id: z.string(),
  status: z.string(),
  target_api: emailSlackTypesSchema.optional().nullable(),
  updated_at: z.string().optional(),
});

export const requestProgressUpdateSchema = z.object({
  created_at: z.string().optional(),
  event_type: z.string().optional(),
  id: z.string().optional(),
  is_progress_step: z.boolean().optional(),
  log: z.string().optional().nullable(),
  meta: jsonSchema.optional().nullable(),
  request_id: z.string().optional(),
  status: z.string().optional(),
  target_api: emailSlackTypesSchema.optional().nullable(),
  updated_at: z.string().optional(),
});

export const requestProgressRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("request_progress_request_id_fkey"),
    columns: z.tuple([z.literal("request_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("request"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const requestRelationRowSchema = z.object({
  cancel_id: z.string().nullable(),
  id: z.string(),
  request_id: z.string(),
  session_id: z.string().nullable(),
});

export const requestRelationInsertSchema = z.object({
  cancel_id: z.string().optional().nullable(),
  id: z.string().optional(),
  request_id: z.string(),
  session_id: z.string().optional().nullable(),
});

export const requestRelationUpdateSchema = z.object({
  cancel_id: z.string().optional().nullable(),
  id: z.string().optional(),
  request_id: z.string().optional(),
  session_id: z.string().optional().nullable(),
});

export const requestRelationRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("request_relation_cancel_id_fkey"),
    columns: z.tuple([z.literal("cancel_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_session_cancel"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_relation_request_id_fkey"),
    columns: z.tuple([z.literal("request_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("request"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_relation_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_relation_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_session"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_relation_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_details"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_relation_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
]);

export const requestSessionRelationRowSchema = z.object({
  id: z.string(),
  request_availability_id: z.string(),
  session_id: z.string(),
});

export const requestSessionRelationInsertSchema = z.object({
  id: z.string().optional(),
  request_availability_id: z.string(),
  session_id: z.string(),
});

export const requestSessionRelationUpdateSchema = z.object({
  id: z.string().optional(),
  request_availability_id: z.string().optional(),
  session_id: z.string().optional(),
});

export const requestSessionRelationRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "request_availability_relation_request_availability_id_fkey",
    ),
    columns: z.tuple([z.literal("request_availability_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_request_availability"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_availability_relation_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_availability_relation_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_session"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_availability_relation_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_details"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("request_availability_relation_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
]);

export const rolePermissionsRowSchema = z.object({
  id: z.string(),
  permission_id: z.number(),
  recruiter_id: z.string(),
  role_id: z.string(),
});

export const rolePermissionsInsertSchema = z.object({
  id: z.string().optional(),
  permission_id: z.number(),
  recruiter_id: z.string(),
  role_id: z.string(),
});

export const rolePermissionsUpdateSchema = z.object({
  id: z.string().optional(),
  permission_id: z.number().optional(),
  recruiter_id: z.string().optional(),
  role_id: z.string().optional(),
});

export const rolePermissionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("role_permissions_permission_id_fkey"),
    columns: z.tuple([z.literal("permission_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("permissions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("role_permissions_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("role_permissions_role_id_fkey"),
    columns: z.tuple([z.literal("role_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("roles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const rolesRowSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  recruiter_id: z.string(),
  updated_at: z.string(),
});

export const rolesInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  recruiter_id: z.string(),
  updated_at: z.string().optional(),
});

export const rolesUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  recruiter_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const rolesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("roles_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const rpLogsRowSchema = z.object({
  application_id: z.string(),
  created_at: z.string(),
  id: z.number(),
  logs: jsonSchema,
});

export const rpLogsInsertSchema = z.object({
  application_id: z.string(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  logs: jsonSchema.optional(),
});

export const rpLogsUpdateSchema = z.object({
  application_id: z.string().optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  logs: jsonSchema.optional(),
});

export const rpLogsRelationshipsSchema = z.tuple([]);

export const rpTokenUsageRowSchema = z.object({
  application_id: z.string(),
  created_at: z.string(),
  id: z.number(),
  task: z.string().nullable(),
  token_used_json: jsonSchema.nullable(),
  total_token_used: z.number().nullable(),
});

export const rpTokenUsageInsertSchema = z.object({
  application_id: z.string(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  task: z.string().optional().nullable(),
  token_used_json: jsonSchema.optional().nullable(),
  total_token_used: z.number().optional().nullable(),
});

export const rpTokenUsageUpdateSchema = z.object({
  application_id: z.string().optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  task: z.string().optional().nullable(),
  token_used_json: jsonSchema.optional().nullable(),
  total_token_used: z.number().optional().nullable(),
});

export const rpTokenUsageRelationshipsSchema = z.tuple([]);

export const schedulingAgentChatHistoryRowSchema = z.object({
  agent_processing: z.boolean(),
  application_id: z.string().nullable(),
  chat_history: z.array(jsonSchema),
  company_id: z.string().nullable(),
  created_at: z.string(),
  email_from_name: z.string(),
  email_subject: z.string(),
  filter_json_id: z.string(),
  job_id: z.string(),
  task_id: z.string().nullable(),
  thread_id: z.string(),
});

export const schedulingAgentChatHistoryInsertSchema = z.object({
  agent_processing: z.boolean().optional(),
  application_id: z.string().optional().nullable(),
  chat_history: z.array(jsonSchema).optional(),
  company_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  email_from_name: z.string(),
  email_subject: z.string(),
  filter_json_id: z.string(),
  job_id: z.string(),
  task_id: z.string().optional().nullable(),
  thread_id: z.string(),
});

export const schedulingAgentChatHistoryUpdateSchema = z.object({
  agent_processing: z.boolean().optional(),
  application_id: z.string().optional().nullable(),
  chat_history: z.array(jsonSchema).optional(),
  company_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  email_from_name: z.string().optional(),
  email_subject: z.string().optional(),
  filter_json_id: z.string().optional(),
  job_id: z.string().optional(),
  task_id: z.string().optional().nullable(),
  thread_id: z.string().optional(),
});

export const schedulingAgentChatHistoryRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "public_scheduling-agent-chat-history_application_id_fkey",
    ),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_status_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_scheduling-agent-chat-history_application_id_fkey",
    ),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_scheduling-agent-chat-history_application_id_fkey",
    ),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_scheduling-agent-chat-history_application_id_fkey",
    ),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("application_id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_scheduling-agent-chat-history_company_id_fkey",
    ),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_scheduling-agent-chat-history_filter_json_id_fkey",
    ),
    columns: z.tuple([z.literal("filter_json_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("interview_filter_json"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_scheduling-agent-chat-history_job_id_fkey",
    ),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("job_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_scheduling-agent-chat-history_job_id_fkey",
    ),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("public_jobs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_scheduling-agent-chat-history_task_id_fkey",
    ),
    columns: z.tuple([z.literal("task_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("new_tasks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_scheduling-agent-chat-history_task_id_fkey",
    ),
    columns: z.tuple([z.literal("task_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tasks_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const supportGroupsRowSchema = z.object({
  company_id: z.string().nullable(),
  created_at: z.string().nullable(),
  id: z.string(),
  updated_at: z.string().nullable(),
  user_ids: z.array(z.string()),
});

export const supportGroupsInsertSchema = z.object({
  company_id: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_ids: z.array(z.string()).optional(),
});

export const supportGroupsUpdateSchema = z.object({
  company_id: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_ids: z.array(z.string()).optional(),
});

export const supportGroupsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("support_groups_company_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const supportTicketRowSchema = z.object({
  action_pending: jsonSchema,
  application_id: z.string().nullable(),
  assign_to: z.string().nullable(),
  attachments: z.array(z.string()).nullable(),
  company_id: z.string().nullable(),
  content: z.array(jsonSchema),
  created_at: z.string().nullable(),
  email: z.string().nullable(),
  email_updates: z.boolean(),
  id: z.string(),
  idx: z.string(),
  job_id: z.string(),
  priority: z.string(),
  state: z.string(),
  support_group_id: z.string().nullable(),
  title: z.string(),
  type: z.string(),
  updated_at: z.string().nullable(),
  user_id: z.string().nullable(),
  user_name: z.string(),
});

export const supportTicketInsertSchema = z.object({
  action_pending: jsonSchema.optional(),
  application_id: z.string().optional().nullable(),
  assign_to: z.string().optional().nullable(),
  attachments: z.array(z.string()).optional().nullable(),
  company_id: z.string().optional().nullable(),
  content: z.array(jsonSchema).optional(),
  created_at: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_updates: z.boolean().optional(),
  id: z.string().optional(),
  idx: z.string().optional(),
  job_id: z.string(),
  priority: z.string().optional(),
  state: z.string().optional(),
  support_group_id: z.string().optional().nullable(),
  title: z.string(),
  type: z.string(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  user_name: z.string(),
});

export const supportTicketUpdateSchema = z.object({
  action_pending: jsonSchema.optional(),
  application_id: z.string().optional().nullable(),
  assign_to: z.string().optional().nullable(),
  attachments: z.array(z.string()).optional().nullable(),
  company_id: z.string().optional().nullable(),
  content: z.array(jsonSchema).optional(),
  created_at: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_updates: z.boolean().optional(),
  id: z.string().optional(),
  idx: z.string().optional(),
  job_id: z.string().optional(),
  priority: z.string().optional(),
  state: z.string().optional(),
  support_group_id: z.string().optional().nullable(),
  title: z.string().optional(),
  type: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  user_name: z.string().optional(),
});

export const supportTicketRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("support_ticket_company_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("support_ticket_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("job_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("support_ticket_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("public_jobs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("support_ticket_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const taskSessionRelationRowSchema = z.object({
  id: z.string(),
  session_id: z.string(),
  task_id: z.string(),
});

export const taskSessionRelationInsertSchema = z.object({
  id: z.string().optional(),
  session_id: z.string(),
  task_id: z.string(),
});

export const taskSessionRelationUpdateSchema = z.object({
  id: z.string().optional(),
  session_id: z.string().optional(),
  task_id: z.string().optional(),
});

export const taskSessionRelationRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("task_session_relation_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("task_session_relation_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_session"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("task_session_relation_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_details"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("task_session_relation_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("task_session_relation_task_id_fkey"),
    columns: z.tuple([z.literal("task_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("new_tasks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("task_session_relation_task_id_fkey"),
    columns: z.tuple([z.literal("task_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tasks_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const tourRowSchema = z.object({
  created_at: z.string(),
  recruiter_relation_id: z.number(),
  type: z.string(),
});

export const tourInsertSchema = z.object({
  created_at: z.string().optional(),
  recruiter_relation_id: z.number().optional(),
  type: z.string(),
});

export const tourUpdateSchema = z.object({
  created_at: z.string().optional(),
  recruiter_relation_id: z.number().optional(),
  type: z.string().optional(),
});

export const tourRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("tour_recruiter_relation_id_fkey"),
    columns: z.tuple([z.literal("recruiter_relation_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_relation"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const userChatRowSchema = z.object({
  content: z.string(),
  created_at: z.string(),
  function: z.string().nullable(),
  id: z.string(),
  metadata: jsonSchema.nullable(),
  type: z.string(),
  user_id: z.string(),
});

export const userChatInsertSchema = z.object({
  content: z.string(),
  created_at: z.string().optional(),
  function: z.string().optional().nullable(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  type: z.string(),
  user_id: z.string(),
});

export const userChatUpdateSchema = z.object({
  content: z.string().optional(),
  created_at: z.string().optional(),
  function: z.string().optional().nullable(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  type: z.string().optional(),
  user_id: z.string().optional(),
});

export const userChatRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_chat_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_chat_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_chat_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const workflowPhaseSchema = z.union([
  z.literal("before"),
  z.literal("after"),
  z.literal("now"),
]);

export const workflowTriggerSchema = z.union([
  z.literal("selfScheduleReminder"),
  z.literal("interviewStart"),
  z.literal("sendAvailReqReminder"),
  z.literal("interviewerConfirmation"),
  z.literal("interviewEnd"),
  z.literal("meetingDeclined"),
  z.literal("meetingAccepted"),
  z.literal("candidateBook"),
  z.literal("onQualified"),
  z.literal("onTrainingComplete"),
  z.literal("onReceivingAvailReq"),
  z.literal("onRequestSchedule"),
  z.literal("onRequestCancel"),
  z.literal("onRequestReschedule"),
  z.literal("onRequestInterviewerDecline"),
]);

export const workflowTypeSchema = z.union([
  z.literal("company"),
  z.literal("job"),
  z.literal("request"),
]);

export const workflowInsertSchema = z.object({
  auto_connect: z.boolean().optional(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  interval: z.number().optional(),
  is_active: z.boolean().optional(),
  phase: workflowPhaseSchema,
  recruiter_id: z.string(),
  request_id: z.string().optional().nullable(),
  title: z.string().optional(),
  trigger: workflowTriggerSchema,
  workflow_type: workflowTypeSchema.optional(),
});

export const workflowUpdateSchema = z.object({
  auto_connect: z.boolean().optional(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  interval: z.number().optional(),
  is_active: z.boolean().optional(),
  phase: workflowPhaseSchema.optional(),
  recruiter_id: z.string().optional(),
  request_id: z.string().optional().nullable(),
  title: z.string().optional(),
  trigger: workflowTriggerSchema.optional(),
  workflow_type: workflowTypeSchema.optional(),
});

export const workflowRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("workflow_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("workflow_request_id_fkey"),
    columns: z.tuple([z.literal("request_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("request"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const workflowActionRowSchema = z.object({
  action_type: z.string(),
  created_at: z.string(),
  id: z.string(),
  order: z.number(),
  payload: jsonSchema,
  target_api: emailSlackTypesSchema,
  workflow_id: z.string(),
});

export const workflowActionInsertSchema = z.object({
  action_type: z.string(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  order: z.number(),
  payload: jsonSchema.optional(),
  target_api: emailSlackTypesSchema,
  workflow_id: z.string(),
});

export const workflowActionUpdateSchema = z.object({
  action_type: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  order: z.number().optional(),
  payload: jsonSchema.optional(),
  target_api: emailSlackTypesSchema.optional(),
  workflow_id: z.string().optional(),
});

export const workflowActionRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("workflow_action_workflow_id_fkey"),
    columns: z.tuple([z.literal("workflow_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("workflow_action_workflow_id_fkey"),
    columns: z.tuple([z.literal("workflow_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const workflowCronTriggerTablesSchema = z.union([
  z.literal("interview_meeting"),
  z.literal("interview_session_relation"),
  z.literal("interview_filter_json"),
  z.literal("candidate_request_availability"),
  z.literal("interview_module_relation"),
  z.literal("interview_training_progress"),
  z.literal("request"),
]);

export const workflowCronRunStatusSchema = z.union([
  z.literal("not_started"),
  z.literal("processing"),
  z.literal("failed"),
  z.literal("success"),
  z.literal("stopped"),
]);

export const workflowActionLogsInsertSchema = z.object({
  completed_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  execute_at: z.string(),
  id: z.number().optional(),
  meta: jsonSchema.optional().nullable(),
  related_table: workflowCronTriggerTablesSchema,
  related_table_pkey: z.string(),
  started_at: z.string().optional().nullable(),
  status: workflowCronRunStatusSchema.optional(),
  tries: z.number().optional(),
  workflow_action_id: z.string(),
  workflow_id: z.string(),
});

export const workflowActionLogsUpdateSchema = z.object({
  completed_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  execute_at: z.string().optional(),
  id: z.number().optional(),
  meta: jsonSchema.optional().nullable(),
  related_table: workflowCronTriggerTablesSchema.optional(),
  related_table_pkey: z.string().optional(),
  started_at: z.string().optional().nullable(),
  status: workflowCronRunStatusSchema.optional(),
  tries: z.number().optional(),
  workflow_action_id: z.string().optional(),
  workflow_id: z.string().optional(),
});

export const workflowActionLogsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("workflow_action_logs_workflow_action_id_fkey"),
    columns: z.tuple([z.literal("workflow_action_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow_action"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("workflow_action_logs_workflow_id_fkey"),
    columns: z.tuple([z.literal("workflow_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("workflow_action_logs_workflow_id_fkey"),
    columns: z.tuple([z.literal("workflow_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const workflowJobRelationRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  job_id: z.string(),
  workflow_id: z.string(),
});

export const workflowJobRelationInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  job_id: z.string().optional(),
  workflow_id: z.string().optional(),
});

export const workflowJobRelationUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  job_id: z.string().optional(),
  workflow_id: z.string().optional(),
});

export const workflowJobRelationRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("workflow_job_relation_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("job_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("workflow_job_relation_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("public_jobs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("workflow_job_relation_workflow_id_fkey"),
    columns: z.tuple([z.literal("workflow_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("workflow_job_relation_workflow_id_fkey"),
    columns: z.tuple([z.literal("workflow_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const allInterviewersRowSchema = z.object({
  completed_meeting_count: z.number().nullable(),
  completed_meeting_last_month: jsonSchema.nullable(),
  department_id: z.number().nullable(),
  email: z.string().nullable(),
  first_name: z.string().nullable(),
  is_calendar_connected: z.boolean().nullable(),
  job_ids: z.array(z.string()).nullable(),
  last_name: z.string().nullable(),
  office_location_id: z.number().nullable(),
  position: z.string().nullable(),
  profile_image: z.string().nullable(),
  qualified_module_names: z.array(z.string()).nullable(),
  recruiter_id: z.string().nullable(),
  schedule_auth: jsonSchema.nullable(),
  scheduling_settings: jsonSchema.nullable(),
  status: z.string().nullable(),
  total_hours_this_week: z.number().nullable(),
  total_hours_today: z.number().nullable(),
  total_interviews_this_week: z.number().nullable(),
  total_interviews_today: z.number().nullable(),
  training_module_names: z.array(z.string()).nullable(),
  upcoming_meeting_count: z.number().nullable(),
  user_id: z.string().nullable(),
});

export const allInterviewersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("recruiter_relation_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("recruiter_user_department_id_fkey"),
    columns: z.tuple([z.literal("department_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("departments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("recruiter_user_office_location_id_fkey"),
    columns: z.tuple([z.literal("office_location_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("office_locations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("recruiter_user_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const applicationMatchSchema = z.union([
  z.literal("top_match"),
  z.literal("good_match"),
  z.literal("average_match"),
  z.literal("poor_match"),
  z.literal("not_a_match"),
  z.literal("unknown_match"),
]);

export const resumeProcessingStateSchema = z.union([
  z.literal("unavailable"),
  z.literal("fetching"),
  z.literal("processing"),
  z.literal("unparsable"),
  z.literal("processed"),
  z.literal("unscorable"),
]);

export const applicationStatusViewRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("applications_candidate_file_id_fkey"),
    columns: z.tuple([z.literal("candidate_file_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_files"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_candidate_id_fkey"),
    columns: z.tuple([z.literal("candidate_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidates"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_candidate_id_fkey"),
    columns: z.tuple([z.literal("candidate_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("candidate_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("public_jobs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("job_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const applicationViewRowSchema = z.object({
  activity_count: z.number().nullable(),
  application_match: applicationMatchSchema.nullable(),
  applied_at: z.string().nullable(),
  badges: jsonSchema.nullable(),
  bookmarked: z.boolean().nullable(),
  candidate_file_id: z.string().nullable(),
  candidate_id: z.string().nullable(),
  city: z.string().nullable(),
  country: z.string().nullable(),
  created_at: z.string().nullable(),
  current_job_title: z.string().nullable(),
  email: z.string().nullable(),
  file_url: z.string().nullable(),
  id: z.string().nullable(),
  interview_plans: z.array(jsonSchema).nullable(),
  interview_score: z.number().nullable(),
  is_new: z.boolean().nullable(),
  job_id: z.string().nullable(),
  latest_activity: z.string().nullable(),
  linkedin: z.string().nullable(),
  name: z.string().nullable(),
  phone: z.string().nullable(),
  processing_status: applicationProcessingStatusSchema.nullable(),
  resume_processing_state: resumeProcessingStateSchema.nullable(),
  resume_score: z.number().nullable(),
  session_names: z.array(z.string()).nullable(),
  state: z.string().nullable(),
  status: z.string().nullable(),
  task_count: z.number().nullable(),
  timezone: z.string().nullable(),
});

export const applicationViewRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("applications_candidate_file_id_fkey"),
    columns: z.tuple([z.literal("candidate_file_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_files"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_candidate_id_fkey"),
    columns: z.tuple([z.literal("candidate_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidates"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_candidate_id_fkey"),
    columns: z.tuple([z.literal("candidate_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("candidate_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("public_jobs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("job_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const candidateApplicationsViewRowSchema = z.object({
  application_id: z.string().nullable(),
  application_status: z.string().nullable(),
  candidate_email: z.string().nullable(),
  candidate_id: z.string().nullable(),
  candidate_name: z.string().nullable(),
  company_id: z.string().nullable(),
  full_text_search: z.unknown().nullable(),
  job_id: z.string().nullable(),
  job_role: z.string().nullable(),
});

export const candidateApplicationsViewRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("applications_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("public_jobs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("job_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("candidates_recruiter_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const debreifMeetingInterviewersRowSchema = z.object({
  email: z.string().nullable(),
  first_name: z.string().nullable(),
  interviewer_type: statusTrainingSchema.nullable(),
  is_confirmed: z.boolean().nullable(),
  last_name: z.string().nullable(),
  meeting_id: z.string().nullable(),
  profile_image: z.string().nullable(),
  session_id: z.string().nullable(),
  training_type: interviewerTypeSchema.nullable(),
  user_id: z.string().nullable(),
});

export const debreifMeetingInterviewersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_interview_session_meeting_id_fkey"),
    columns: z.tuple([z.literal("meeting_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_meeting"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_session_meeting_id_fkey"),
    columns: z.tuple([z.literal("meeting_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_details"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("recruiter_user_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const interviewTypesViewRowSchema = z.object({
  avg_meeting_duration: z.number().nullable(),
  canceled_meeting_count: z.number().nullable(),
  completed_meeting_count: z.number().nullable(),
  created_by: z.string().nullable(),
  department_id: z.number().nullable(),
  department_name: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string().nullable(),
  is_archived: z.boolean().nullable(),
  job_names: z.array(z.string()).nullable(),
  name: z.string().nullable(),
  recruiter_id: z.string().nullable(),
  this_month_cancelled_meeting_count: z.number().nullable(),
  this_month_completed_meeting_count: z.number().nullable(),
  this_month_confirmed_meeting_count: z.number().nullable(),
  upcoming_meeting_count: z.number().nullable(),
  users: jsonSchema.nullable(),
});

export const interviewTypesViewRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("interview_module_department_id_fkey"),
    columns: z.tuple([z.literal("department_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("departments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_panel_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_module_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_module_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_module_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const jobViewRowSchema = z.object({
  application_match: jsonSchema.nullable(),
  created_at: z.string().nullable(),
  department: z.string().nullable(),
  department_id: z.number().nullable(),
  description: z.string().nullable(),
  draft: jsonSchema.nullable(),
  hiring_manager: z.string().nullable(),
  id: z.string().nullable(),
  interview_coordinator: z.string().nullable(),
  interview_plan_warning_ignore: z.boolean().nullable(),
  interview_session_warning_ignore: z.boolean().nullable(),
  is_pinned: z.boolean().nullable(),
  jd_json: jsonSchema.nullable(),
  job_title: z.string().nullable(),
  job_type: publicJobTypeSchema.nullable(),
  location: jsonSchema.nullable(),
  location_id: z.number().nullable(),
  parameter_weights: jsonSchema.nullable(),
  posted_by: z.string().nullable(),
  processing_count: jsonSchema.nullable(),
  recruiter: z.string().nullable(),
  recruiter_id: z.string().nullable(),
  recruiting_coordinator: z.string().nullable(),
  remote_sync_time: z.string().nullable(),
  scoring_criteria_loading: z.boolean().nullable(),
  section_count: jsonSchema.nullable(),
  sourcer: z.string().nullable(),
  status: publicJobStatusSchema.nullable(),
  syncable: z.boolean().nullable(),
  workplace_type: publicJobWorkplaceSchema.nullable(),
});

export const jobViewRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_jobs_department_id_fkey"),
    columns: z.tuple([z.literal("department_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("departments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_hiring_manager_fkey"),
    columns: z.tuple([z.literal("hiring_manager")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_hiring_manager_fkey"),
    columns: z.tuple([z.literal("hiring_manager")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_hiring_manager_fkey"),
    columns: z.tuple([z.literal("hiring_manager")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_interview_coordinator_fkey"),
    columns: z.tuple([z.literal("interview_coordinator")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_interview_coordinator_fkey"),
    columns: z.tuple([z.literal("interview_coordinator")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_interview_coordinator_fkey"),
    columns: z.tuple([z.literal("interview_coordinator")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_location_id_fkey"),
    columns: z.tuple([z.literal("location_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("office_locations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_recruiter_fkey"),
    columns: z.tuple([z.literal("recruiter")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_recruiter_fkey"),
    columns: z.tuple([z.literal("recruiter")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_recruiter_fkey"),
    columns: z.tuple([z.literal("recruiter")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_recruiting_coordinator_fkey"),
    columns: z.tuple([z.literal("recruiting_coordinator")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_recruiting_coordinator_fkey"),
    columns: z.tuple([z.literal("recruiting_coordinator")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_recruiting_coordinator_fkey"),
    columns: z.tuple([z.literal("recruiting_coordinator")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_sourcer_fkey"),
    columns: z.tuple([z.literal("sourcer")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_sourcer_fkey"),
    columns: z.tuple([z.literal("sourcer")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_sourcer_fkey"),
    columns: z.tuple([z.literal("sourcer")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const meetingDetailsRowSchema = z.object({
  application_id: z.string().nullable(),
  break_duration: z.number().nullable(),
  cal_event_id: z.string().nullable(),
  candidate_feedback: jsonSchema.nullable(),
  confirmed_candidate_tz: z.string().nullable(),
  confirmed_date: z.string().nullable(),
  confirmed_module_relation_ids: z.array(z.string()).nullable(),
  confirmed_user_ids: z.array(z.string()).nullable(),
  created_at: z.string().nullable(),
  end_time: z.string().nullable(),
  id: z.string().nullable(),
  instructions: z.string().nullable(),
  job_id: z.string().nullable(),
  meeting_flow: meetingFlowSchema.nullable(),
  meeting_json: jsonSchema.nullable(),
  meeting_link: z.string().nullable(),
  module_id: z.string().nullable(),
  organizer_id: z.string().nullable(),
  parent_session_id: z.string().nullable(),
  recruiter_id: z.string().nullable(),
  schedule_request_id: z.string().nullable(),
  schedule_type: interviewScheduleTypeSchema.nullable(),
  session_duration: z.number().nullable(),
  session_id: z.string().nullable(),
  session_name: z.string().nullable(),
  session_order: z.number().nullable(),
  session_type: sessionTypeSchema.nullable(),
  start_time: z.string().nullable(),
  status: interviewScheduleStatusSchema.nullable(),
});

export const meetingDetailsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("applications_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("public_jobs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_job_id_fkey"),
    columns: z.tuple([z.literal("job_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("job_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_status_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("application_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_organizer_id_fkey"),
    columns: z.tuple([z.literal("organizer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_organizer_id_fkey"),
    columns: z.tuple([z.literal("organizer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_meeting_organizer_id_fkey"),
    columns: z.tuple([z.literal("organizer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_parent_session_id_fkey"),
    columns: z.tuple([z.literal("parent_session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_session"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_parent_session_id_fkey"),
    columns: z.tuple([z.literal("parent_session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_parent_session_id_fkey"),
    columns: z.tuple([z.literal("parent_session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_details"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_session_parent_session_id_fkey"),
    columns: z.tuple([z.literal("parent_session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("session_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_session_module_id_fkey"),
    columns: z.tuple([z.literal("module_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_module"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_session_module_id_fkey"),
    columns: z.tuple([z.literal("module_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_types_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_jobs_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const meetingInterviewersRowSchema = z.object({
  accepted_status: sessionAcceptedStatusSchema.nullable(),
  cancel_reasons: jsonSchema.nullable(),
  email: z.string().nullable(),
  first_name: z.string().nullable(),
  interview_module_relation_id: z.string().nullable(),
  interviewer_type: statusTrainingSchema.nullable(),
  is_confirmed: z.boolean().nullable(),
  job_id: z.string().nullable(),
  last_name: z.string().nullable(),
  meeting_id: z.string().nullable(),
  module_id: z.string().nullable(),
  position: z.string().nullable(),
  profile_image: z.string().nullable(),
  schedule_auth: jsonSchema.nullable(),
  scheduling_settings: jsonSchema.nullable(),
  session_id: z.string().nullable(),
  session_relation_id: z.string().nullable(),
  session_type: sessionTypeSchema.nullable(),
  totalhoursthisweek: z.number().nullable(),
  totalhourstoday: z.number().nullable(),
  totalinterviewsthisweek: z.number().nullable(),
  totalinterviewstoday: z.number().nullable(),
  training_type: interviewerTypeSchema.nullable(),
  tz_code: z.string().nullable(),
  user_id: z.string().nullable(),
});

export const meetingInterviewersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("interview_panel_relation_panel_id_fkey"),
    columns: z.tuple([z.literal("module_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_module"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_panel_relation_panel_id_fkey"),
    columns: z.tuple([z.literal("module_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_types_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_session_meeting_id_fkey"),
    columns: z.tuple([z.literal("meeting_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_meeting"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_session_meeting_id_fkey"),
    columns: z.tuple([z.literal("meeting_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("meeting_details"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_interview_session_relation_interview_module_relation_id_",
    ),
    columns: z.tuple([z.literal("interview_module_relation_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_module_relation"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "public_interview_session_relation_interview_module_relation_id_",
    ),
    columns: z.tuple([z.literal("interview_module_relation_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("module_relations_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const moduleRelationsViewRowSchema = z.object({
  cancelled_meeting_count: z.number().nullable(),
  completed_meeting_count: z.number().nullable(),
  completed_meeting_duration: z.number().nullable(),
  confirmed_meeting_count: z.number().nullable(),
  first_name: z.string().nullable(),
  id: z.string().nullable(),
  is_archived: z.boolean().nullable(),
  meetings: jsonSchema.nullable(),
  module_description: z.string().nullable(),
  module_id: z.string().nullable(),
  module_name: z.string().nullable(),
  module_training_status: statusTrainingSchema.nullable(),
  number_of_reverse_shadow: z.number().nullable(),
  number_of_shadow: z.number().nullable(),
  pause_json: jsonSchema.nullable(),
  phone: z.string().nullable(),
  position: z.string().nullable(),
  profile_image: z.string().nullable(),
  reverse_shadow_completed_count: z.number().nullable(),
  reverse_shadow_confirmed_count: z.number().nullable(),
  scheduling_settings: jsonSchema.nullable(),
  shadow_completed_count: z.number().nullable(),
  shadow_confirmed_count: z.number().nullable(),
  user_id: z.string().nullable(),
});

export const moduleRelationsViewRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("interview_panel_relation_panel_id_fkey"),
    columns: z.tuple([z.literal("module_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_module"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("interview_panel_relation_panel_id_fkey"),
    columns: z.tuple([z.literal("module_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_types_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_module_relation_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_module_relation_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_interview_module_relation_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const tasksViewRowSchema = z.object({
  agent: taskAgentTypeSchema.nullable(),
  application_id: z.string().nullable(),
  assignee: z.array(z.string()).nullable(),
  created_at: z.string().nullable(),
  created_by: z.string().nullable(),
  due_date: z.string().nullable(),
  filter_id: z.string().nullable(),
  id: z.string().nullable(),
  latest_progress: jsonSchema.nullable(),
  name: z.string().nullable(),
  priority: taskPrioritySchema.nullable(),
  recruiter_id: z.string().nullable(),
  request_availability_id: z.string().nullable(),
  schedule_date_range: jsonSchema.nullable(),
  session_ids: jsonSchema.nullable(),
  start_date: z.string().nullable(),
  status: taskStatusSchema.nullable(),
  task_action: jsonSchema.nullable(),
  task_owner: z.string().nullable(),
  trigger_count: z.number().nullable(),
  type: taskTypeEnumSchema.nullable(),
});

export const tasksViewRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("new_tasks_request_availability_id_fkey"),
    columns: z.tuple([z.literal("request_availability_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_request_availability"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_status_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("application_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("candidate_applications_view"),
    referencedColumns: z.tuple([z.literal("application_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_cretaed_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter_user"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_cretaed_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("all_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_cretaed_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("debreif_meeting_interviewers"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_new_tasks_filter_id_fkey"),
    columns: z.tuple([z.literal("filter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("interview_filter_json"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const workflowViewRowSchema = z.object({
  auto_connect: z.boolean().nullable(),
  created_at: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string().nullable(),
  interval: z.number().nullable(),
  is_paused: z.boolean().nullable(),
  jobs: z.array(jsonSchema).nullable(),
  phase: workflowPhaseSchema.nullable(),
  recruiter_id: z.string().nullable(),
  request_id: z.string().nullable(),
  tags: z.array(z.string()).nullable(),
  title: z.string().nullable(),
  trigger: workflowTriggerSchema.nullable(),
  workflow_type: workflowTypeSchema.nullable(),
});

export const workflowViewRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("workflow_recruiter_id_fkey"),
    columns: z.tuple([z.literal("recruiter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("recruiter"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("workflow_request_id_fkey"),
    columns: z.tuple([z.literal("request_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("request"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const ashbyapplicationsyncReturnsSchema = jsonSchema;

export const ashbysyncReturnsSchema = jsonSchema;

export const batchscorecronReturnsSchema = jsonSchema;

export const batchtriggergreenhouseReturnsSchema = jsonSchema;

export const customAccessTokenHookReturnsSchema = jsonSchema;

export const emailcroncandidatedbReturnsSchema = jsonSchema;

export const getAllInterviewSessionByUserIdReturnsSchema = jsonSchema;

export const getApplicantBadgesReturnsSchema = jsonSchema;

export const getallresumematchesReturnsSchema = jsonSchema;

export const getapplicationprocessingstatuscountReturnsSchema = jsonSchema;

export const getexperienceandtenureReturnsSchema = jsonSchema;

export const getlocationspoolReturnsSchema = jsonSchema;

export const getskillpoolsReturnsSchema = jsonSchema;

export const levercandidatesyncReturnsSchema = jsonSchema;

export const newGetInterviewScheduleByMeetingIdReturnsSchema = jsonSchema;

export const outreachhandlerReturnsSchema = jsonSchema;

export const overviewgenerateReturnsSchema = jsonSchema;

export const schedulercronReturnsSchema = jsonSchema;

export const activityTypeSchema = z.union([
  z.literal("aglint"),
  z.literal("user"),
  z.literal("candidate"),
]);

export const agentTypeSchema = z.union([
  z.literal("scheduler"),
  z.literal("job"),
  z.literal("sourcing"),
  z.literal("screening"),
]);

export const agentTypesSchema = z.union([
  z.literal("scheduler"),
  z.literal("screening"),
  z.literal("job_assistant"),
  z.literal("sourcing"),
]);

export const assessmentModeSchema = z.union([
  z.literal("classic"),
  z.literal("verbal"),
  z.literal("visual"),
]);

export const iconStatusActivitySchema = z.union([
  z.literal("success"),
  z.literal("waiting"),
  z.literal("error"),
]);

export const permissionsTypeSchema = z.union([
  z.literal("jobs_create"),
  z.literal("jobs_read"),
  z.literal("jobs_update"),
  z.literal("jobs_delete"),
  z.literal("jobs_publish"),
  z.literal("jobs_unpublish"),
  z.literal("jobs_archive"),
  z.literal("jobs_restore"),
  z.literal("jobs_assignHiringManager"),
  z.literal("jobs_assignRecruiter"),
  z.literal("jobs_assignCoordinator"),
  z.literal("jobs_assignSourcer"),
  z.literal("candidates_add"),
  z.literal("candidates_read"),
  z.literal("candidates_update"),
  z.literal("candidates_delete"),
  z.literal("candidates_moveStage"),
  z.literal("profileScore_view"),
  z.literal("profileScore_update"),
  z.literal("interviews_schedule"),
  z.literal("interviews_read"),
  z.literal("interviews_update"),
  z.literal("interviews_delete"),
  z.literal("reports_generate"),
  z.literal("reports_view"),
  z.literal("reports_export"),
  z.literal("settings_view"),
  z.literal("settings_update"),
  z.literal("tasks_enabled"),
  z.literal("jobs_enabled"),
  z.literal("scheduler_enabled"),
  z.literal("sourcing_enabled"),
  z.literal("phone_screening_enabled"),
  z.literal("assessment_enabled"),
  z.literal("integrations_enabled"),
  z.literal("company_setting_enabled"),
  z.literal("workflow_enabled"),
  z.literal("workflow_create"),
  z.literal("workflow_read"),
  z.literal("workflow_update"),
  z.literal("workflow_delete"),
  z.literal("team_enabled"),
  z.literal("team_create"),
  z.literal("team_read"),
  z.literal("team_update"),
  z.literal("team_delete"),
  z.literal("tasks_create"),
  z.literal("tasks_read"),
  z.literal("tasks_update"),
  z.literal("tasks_delete"),
  z.literal("scheduler_create"),
  z.literal("scheduler_read"),
  z.literal("scheduler_update"),
  z.literal("scheduler_delete"),
  z.literal("scheduler_request_availability"),
  z.literal("scheduler_send_scheduling"),
  z.literal("scheduler_interview_types_create"),
  z.literal("scheduler_interview_types_read"),
  z.literal("scheduler_interview_types_update"),
  z.literal("scheduler_interviewer_edit"),
  z.literal("settings_scheduler_enable"),
  z.literal("settings_scheduler_update"),
  z.literal("settings_company_enable"),
  z.literal("settings_company_update"),
  z.literal("settings_team_enable"),
  z.literal("settings_team_update"),
  z.literal("settings_roles_enable"),
  z.literal("settings_roles_update"),
]);

export const recruiterRolesxSchema = z.union([
  z.literal("admin"),
  z.literal("member"),
  z.literal("interviewer"),
  z.literal("scheduler"),
  z.literal("recruiter"),
]);

export const senderTypeSchema = z.union([
  z.literal("aglint"),
  z.literal("you"),
  z.literal("system"),
  z.literal("user"),
]);

export const subTaskStatusSchema = z.union([
  z.literal("completed"),
  z.literal("pending"),
  z.literal("in_progress"),
  z.literal("failed"),
  z.literal("closed"),
]);

export const templateTypeSchema = z.union([
  z.literal("cognitive"),
  z.literal("language"),
  z.literal("personality"),
  z.literal("culture"),
  z.literal("programming"),
  z.literal("role"),
  z.literal("situational"),
  z.literal("software"),
  z.literal("typing"),
]);

export const locationTypeSchema = z.object({
  city: z.string().nullable(),
  state: z.string().nullable(),
  country: z.string().nullable(),
});

export const myTableTypeSchema = z.object({
  name: z.string().nullable(),
  age: z.number().nullable(),
  city: z.string().nullable(),
});

export const aglintCandidatesRowSchema = z.object({
  aglint_id: z.string(),
  city: z.string().nullable(),
  country: z.string().nullable(),
  created_at: z.string(),
  departments: z.array(z.string()).nullable(),
  email: z.string().nullable(),
  email_fetch_status: emailFetchStatusSchema,
  email_status: z.string().nullable(),
  employment_history: z.array(jsonSchema).nullable(),
  extrapolated_email_confidence: z.string().nullable(),
  facebook_url: z.string().nullable(),
  first_name: z.string().nullable(),
  functions: z.array(z.string()).nullable(),
  github_url: z.string().nullable(),
  headline: z.string().nullable(),
  id: z.string(),
  intent_strength: z.string().nullable(),
  is_likely_to_engage: z.boolean().nullable(),
  last_name: z.string().nullable(),
  linkedin_url: z.string().nullable(),
  name: z.string().nullable(),
  organization: jsonSchema.nullable(),
  organization_id: z.string().nullable(),
  phone_numbers: jsonSchema.nullable(),
  photo_url: z.string().nullable(),
  revealed_for_current_team: z.boolean().nullable(),
  search_query: jsonSchema,
  seniority: z.string().nullable(),
  show_intent: z.boolean().nullable(),
  state: z.string().nullable(),
  subdepartments: z.array(z.string()).nullable(),
  title: z.string().nullable(),
  twitter_url: z.string().nullable(),
});

export const applicationEmailStatusRowSchema = z.object({
  application_id: z.string(),
  created_at: z.string(),
  email: emailSlackTypesSchema,
  id: z.string(),
});

export const applicationLogsRowSchema = z.object({
  application_id: z.string(),
  created_at: z.string(),
  created_by: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  logged_by: applicationLoggerSchema,
  metadata: jsonSchema.nullable(),
  module: modulesSchema,
  task_id: z.string().nullable(),
  title: z.string().nullable(),
});

export const applicationsRowSchema = z.object({
  applied_at: z.string(),
  bookmarked: z.boolean(),
  candidate_file_id: z.string().nullable(),
  candidate_id: z.string().nullable(),
  converted_at: z.string().nullable(),
  created_at: z.string(),
  feedback: jsonSchema.nullable(),
  id: z.string(),
  is_new: z.boolean(),
  is_resume_fetching: z.boolean(),
  job_id: z.string(),
  overall_interview_score: z.number(),
  overall_score: z.number(),
  phone_screening: jsonSchema.nullable(),
  processing_started_at: z.string().nullable(),
  processing_status: applicationProcessingStatusSchema,
  recruiter_id: z.string(),
  remote_data: jsonSchema.nullable(),
  remote_id: z.string().nullable(),
  retry: z.number(),
  score_json: jsonSchema.nullable(),
  source: applicationSourceSchema,
  status: z.string(),
  status_emails_sent: jsonSchema,
});

export const candidateFilesRowSchema = z.object({
  candidate_id: z.string(),
  created_at: z.string(),
  education_embedding: z.string().nullable(),
  experience_embedding: z.string().nullable(),
  file_url: z.string().nullable(),
  id: z.string(),
  resume_embedding: z.string().nullable(),
  resume_json: jsonSchema.nullable(),
  resume_text: z.string().nullable(),
  skills_embedding: z.string().nullable(),
  type: fileTypeSchema.nullable(),
});

export const candidateSearchHistoryRowSchema = z.object({
  bookmarked_candidates: z.array(z.string()).nullable(),
  candidates: z.array(z.string()),
  created_at: z.string(),
  db_search: dbSearchTypeSchema.nullable(),
  id: z.number(),
  is_search_jd: z.boolean().nullable(),
  query_json: jsonSchema.nullable(),
  recruiter_id: z.string(),
  search_query: z.string().nullable(),
  search_results: z.array(jsonSchema).nullable(),
  used_credits: jsonSchema,
});

export const interviewMeetingRowSchema = z.object({
  application_id: z.string(),
  cal_event_id: z.string().nullable(),
  candidate_feedback: jsonSchema.nullable(),
  confirmed_candidate_tz: z.string().nullable(),
  confirmed_date: z.string().nullable(),
  created_at: z.string(),
  end_time: z.string().nullable(),
  id: z.string(),
  instructions: z.string().nullable(),
  job_id: z.string(),
  meeting_flow: meetingFlowSchema,
  meeting_json: jsonSchema.nullable(),
  meeting_link: z.string().nullable(),
  organizer_id: z.string().nullable(),
  recruiter_id: z.string(),
  schedule_request_id: z.string().nullable(),
  start_time: z.string().nullable(),
  status: interviewScheduleStatusSchema,
});

export const interviewModuleRelationRowSchema = z.object({
  id: z.string(),
  is_archived: z.boolean(),
  module_id: z.string(),
  number_of_reverse_shadow: z.number(),
  number_of_shadow: z.number(),
  pause_json: jsonSchema.nullable(),
  training_approver: z.string().nullable(),
  training_status: statusTrainingSchema,
  user_id: z.string(),
});

export const interviewSessionRowSchema = z.object({
  break_duration: z.number(),
  created_at: z.string(),
  id: z.string(),
  interview_plan_id: z.string().nullable(),
  interviewer_cnt: z.number(),
  location: z.string().nullable(),
  meeting_id: z.string().nullable(),
  members_meta: jsonSchema,
  module_id: z.string().nullable(),
  name: z.string(),
  parent_session_id: z.string().nullable(),
  recruiter_id: z.string(),
  schedule_type: interviewScheduleTypeSchema,
  session_duration: z.number(),
  session_order: z.number(),
  session_type: sessionTypeSchema,
});

export const interviewSessionCancelRowSchema = z.object({
  application_id: z.string().nullable(),
  cancel_user_id: z.string().nullable(),
  created_at: z.string(),
  id: z.string(),
  is_ignored: z.boolean(),
  is_resolved: z.boolean(),
  other_details: jsonSchema.nullable(),
  reason: z.string(),
  request_id: z.string().nullable(),
  session_id: z.string(),
  session_relation_id: z.string().nullable(),
  type: cancelTypeSchema,
});

export const interviewSessionRelationRowSchema = z.object({
  accepted_status: sessionAcceptedStatusSchema,
  feedback: jsonSchema.nullable(),
  id: z.string(),
  interview_module_relation_id: z.string().nullable(),
  interviewer_type: statusTrainingSchema,
  is_confirmed: z.boolean(),
  session_id: z.string(),
  training_type: interviewerTypeSchema.nullable(),
  user_id: z.string().nullable(),
});

export const newTasksRowSchema = z.object({
  agent: taskAgentTypeSchema.nullable(),
  application_id: z.string().nullable(),
  assignee: z.array(z.string()),
  created_at: z.string(),
  created_by: z.string(),
  due_date: z.string().nullable(),
  filter_id: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  priority: taskPrioritySchema,
  recruiter_id: z.string().nullable(),
  request_availability_id: z.string().nullable(),
  schedule_date_range: jsonSchema.nullable(),
  start_date: z.string().nullable(),
  status: taskStatusSchema,
  task_action: jsonSchema.nullable(),
  task_owner: z.string().nullable(),
  trigger_count: z.number(),
  type: taskTypeEnumSchema.nullable(),
});

export const newTasksProgressRowSchema = z.object({
  created_at: z.string(),
  created_by: jsonSchema,
  id: z.string(),
  jsonb_data: jsonSchema.nullable(),
  progress_type: progressTypeSchema,
  task_id: z.string(),
  title: z.string(),
  title_meta: jsonSchema.nullable(),
});

export const publicJobsRowSchema = z.object({
  active_status: jsonSchema,
  created_at: z.string(),
  department_id: z.number().nullable(),
  description: z.string().nullable(),
  draft: jsonSchema.nullable(),
  hiring_manager: z.string().nullable(),
  id: z.string(),
  interview_coordinator: z.string().nullable(),
  interview_plan_warning_ignore: z.boolean(),
  interview_session_warning_ignore: z.boolean(),
  is_ats_sync: z.boolean(),
  is_pinned: z.boolean(),
  jd_changed: z.boolean().nullable(),
  jd_json: jsonSchema.nullable(),
  job_criteria: jsonSchema.nullable(),
  job_title: z.string(),
  job_type: publicJobTypeSchema.nullable(),
  location_id: z.number().nullable(),
  new_screening_setting: jsonSchema,
  parameter_weights: jsonSchema,
  posted_by: z.string(),
  recruiter: z.string().nullable(),
  recruiter_id: z.string(),
  recruiting_coordinator: z.string().nullable(),
  remote_id: z.string().nullable(),
  remote_sync_time: z.string().nullable(),
  scoring_criteria_loading: z.boolean(),
  screening_setting: jsonSchema.nullable(),
  slug: z.string(),
  sourcer: z.string().nullable(),
  status: publicJobStatusSchema,
  updated_at: z.string().nullable(),
  workplace_type: publicJobWorkplaceSchema.nullable(),
});

export const questionBankRowSchema = z.object({
  answer: jsonSchema.nullable(),
  created_at: z.string(),
  description: jsonSchema.nullable(),
  duration: z.number().nullable(),
  embeddings: z.string().nullable(),
  id: z.string(),
  level: questionLevelSchema.nullable(),
  question: jsonSchema.nullable(),
  required: z.boolean(),
  type: questionTypeSchema,
});

export const recruiterRelationRowSchema = z.object({
  created_at: z.string(),
  created_by: z.string(),
  id: z.number(),
  is_active: z.boolean(),
  manager_id: z.string().nullable(),
  recruiter_id: z.string(),
  role: userRolesSchema,
  role_id: z.string().nullable(),
  user_id: z.string(),
});

export const recruiterUserRowSchema = z.object({
  calendar_sync: jsonSchema.nullable(),
  calendar_sync_token: z.string().nullable(),
  created_at: z.string(),
  department_id: z.number().nullable(),
  email: z.string(),
  email_auth: jsonSchema.nullable(),
  email_outreach_templates: z.array(jsonSchema).nullable(),
  employment: employmentTypeEnumSchema,
  first_name: z.string(),
  is_calendar_connected: z.boolean(),
  joined_at: z.string().nullable(),
  last_name: z.string().nullable(),
  linked_in: z.string().nullable(),
  office_location_id: z.number().nullable(),
  phone: z.string().nullable(),
  position: z.string().nullable(),
  profile_image: z.string().nullable(),
  remote_id: z.string().nullable(),
  schedule_auth: jsonSchema.nullable(),
  scheduling_settings: jsonSchema.nullable(),
  status: z.string(),
  user_id: z.string(),
});

export const workflowRowSchema = z.object({
  auto_connect: z.boolean(),
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  interval: z.number(),
  is_active: z.boolean(),
  phase: workflowPhaseSchema,
  recruiter_id: z.string(),
  request_id: z.string().nullable(),
  title: z.string(),
  trigger: workflowTriggerSchema,
  workflow_type: workflowTypeSchema,
});

export const workflowActionLogsRowSchema = z.object({
  completed_at: z.string().nullable(),
  created_at: z.string(),
  execute_at: z.string(),
  id: z.number(),
  meta: jsonSchema.nullable(),
  related_table: workflowCronTriggerTablesSchema,
  related_table_pkey: z.string(),
  started_at: z.string().nullable(),
  status: workflowCronRunStatusSchema,
  tries: z.number(),
  workflow_action_id: z.string(),
  workflow_id: z.string(),
});

export const applicationStatusViewRowSchema = z.object({
  application_match: applicationMatchSchema.nullable(),
  applied_at: z.string().nullable(),
  badges: jsonSchema.nullable(),
  bookmarked: z.boolean().nullable(),
  candidate_file_id: z.string().nullable(),
  candidate_id: z.string().nullable(),
  created_at: z.string().nullable(),
  file_url: z.string().nullable(),
  id: z.string().nullable(),
  interview_score: z.number().nullable(),
  is_new: z.boolean().nullable(),
  job_id: z.string().nullable(),
  processing_status: applicationProcessingStatusSchema.nullable(),
  resume_processing_state: resumeProcessingStateSchema.nullable(),
  resume_score: z.number().nullable(),
  status: z.string().nullable(),
});
