create table "public"."rp_logs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "application_id" uuid not null,
    "logs" jsonb not null default '{}'::jsonb
);


create table "public"."rp_token_usage" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "application_id" uuid not null,
    "token_used_json" jsonb,
    "total_token_used" numeric,
    "task" text
);


alter table "public"."rp_token_usage" enable row level security;

alter table "public"."candidates" add column "resume_text" text;

alter table "public"."public_jobs" add column "jd_json" jsonb;

CREATE UNIQUE INDEX rp_logs_pkey ON public.rp_logs USING btree (id);

CREATE UNIQUE INDEX rp_token_usage_pkey ON public.rp_token_usage USING btree (id);

alter table "public"."rp_logs" add constraint "rp_logs_pkey" PRIMARY KEY using index "rp_logs_pkey";

alter table "public"."rp_token_usage" add constraint "rp_token_usage_pkey" PRIMARY KEY using index "rp_token_usage_pkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.batchcalcresumejdscore()
 RETURNS jsonb
 LANGUAGE plpgsql
AS $function$
DECLARE
    result JSONB;
    request_results JSONB;
    app_data RECORD;
BEGIN
    -- Initialize an empty JSON array for the results
    result := '[]'::JSONB;

    -- Loop through the selected application data
    FOR app_data IN (
       SELECT
           ja.application_id AS application_id,
           ja.candidate_id AS candidate_id,
           ja.jd_score AS jd_score,
           c.resume AS resume,
           c.json_resume AS json_resume,
           c.resume_text AS resume_text,
           jsonb_build_object('description', pj.description, 'skills', pj.skills, 'job_title', pj.job_title) AS jd_json
       FROM job_applications ja
       JOIN candidates c ON ja.candidate_id = c.id
       JOIN public_jobs pj ON ja.job_id = pj.id
       WHERE ja.api_status = 'not started' AND c.resume IS NOT NULL
       ORDER BY ja.created_at ASC
       LIMIT 5
    )
    LOOP

        UPDATE job_applications
        SET api_status = 'processing'
        WHERE application_id = app_data.application_id;
        -- Convert the row to JSON
        request_results := row_to_json(app_data);

        -- Make the HTTP request for each application data
        SELECT
            net.http_post(
                url := 'https://northamerica-northeast2-aglint-cloud-381414.cloudfunctions.net/process_resume_and_jd_v1',
                body := request_results
            ) INTO request_results;

        -- Append the request result to the result array
        result := result || jsonb_build_object('request_result', request_results);
    END LOOP;

    UPDATE job_applications
    SET api_status = 'processing'
    WHERE api_status = 'not started'
    AND candidate_id IN (SELECT candidate_id FROM job_applications WHERE api_status = 'processing' LIMIT 5);

    -- Return the final result as a JSONB array
    RETURN result;
END;
$function$
;


