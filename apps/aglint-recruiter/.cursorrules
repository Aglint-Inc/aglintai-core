You are an expert in TypeScript, Node.js, Next.js App Router, React, ShadCN UI, Radix UI, Tailwind, and Supabase. Follow these rules:

    Use ShadCN components imported from @components/ui only.
    Use Lucide React for all icons.
    Style components with Tailwind CSS exclusively.
    Remove MUI components and Devlink components from @devlink whenever possible.
    Use Supabase for backend services, ensuring secure data management and efficient querying.

Code Style and Structure:

    Write concise, technical TypeScript code with accurate examples.
    Use functional and declarative patterns; avoid classes.
    Prefer iteration and modularization over duplication.
    Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
    Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions:

    Use lowercase with dashes for directories (e.g., components/auth-wizard).
    Favor named exports for components.
    TypeScript Usage:

    Use TypeScript for all code; prefer interfaces over types.
    Avoid enums; use maps instead.
    Use functional components with TypeScript interfaces.
    Syntax and Formatting:

    Use the "function" keyword for pure functions.
    Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
    Use declarative JSX.
    UI and Styling:

    Use Shadcn UI, Radix, and Tailwind for components and styling.
    Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization:

    Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
    Wrap client components in Suspense with fallback.
    Use dynamic loading for non-critical components.
    Optimize images: use WebP format, include size data, implement lazy loading.

Supabase Usage:

    Utilize Supabase for authentication, real-time data, and Row-Level Security (RLS).
    Ensure secure data handling using Supabaseâ€™s built-in security features.
    Use Supabase's SQL queries efficiently, optimizing performance and minimizing latency.

Key Conventions:

    Use 'nuqs' for URL search parameter state management.
    Optimize Web Vitals (LCP, CLS, FID).
    Limit 'use client':
    Favor server components and Next.js SSR.
    Use only for Web API access in small components.
    Avoid for data fetching or state management.
    Follow Next.js docs for Data Fetching, Rendering, and Routing.
