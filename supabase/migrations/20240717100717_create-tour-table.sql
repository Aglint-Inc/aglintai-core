create table "public"."tour" (
    "recruiter_relation_id" bigint generated by default as identity not null,
    "type" text not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."tour" enable row level security;

CREATE UNIQUE INDEX tour_pkey ON public.tour USING btree (recruiter_relation_id, type);

alter table "public"."tour" add constraint "tour_pkey" PRIMARY KEY using index "tour_pkey";

alter table "public"."tour" add constraint "tour_recruiter_relation_id_fkey" FOREIGN KEY (recruiter_relation_id) REFERENCES recruiter_relation(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."tour" validate constraint "tour_recruiter_relation_id_fkey";

alter table "public"."tour" add constraint "tour_type_check" CHECK ((type = 'workflow_tip'::text)) not valid;

alter table "public"."tour" validate constraint "tour_type_check";

grant delete on table "public"."tour" to "anon";

grant insert on table "public"."tour" to "anon";

grant references on table "public"."tour" to "anon";

grant select on table "public"."tour" to "anon";

grant trigger on table "public"."tour" to "anon";

grant truncate on table "public"."tour" to "anon";

grant update on table "public"."tour" to "anon";

grant delete on table "public"."tour" to "authenticated";

grant insert on table "public"."tour" to "authenticated";

grant references on table "public"."tour" to "authenticated";

grant select on table "public"."tour" to "authenticated";

grant trigger on table "public"."tour" to "authenticated";

grant truncate on table "public"."tour" to "authenticated";

grant update on table "public"."tour" to "authenticated";

grant delete on table "public"."tour" to "service_role";

grant insert on table "public"."tour" to "service_role";

grant references on table "public"."tour" to "service_role";

grant select on table "public"."tour" to "service_role";

grant trigger on table "public"."tour" to "service_role";

grant truncate on table "public"."tour" to "service_role";

grant update on table "public"."tour" to "service_role";

create policy "tour authenticated insert"
on "public"."tour"
as permissive
for insert
to authenticated
with check ((recruiter_relation_id IN ( SELECT recruiter_relation.id
   FROM recruiter_relation)));


create policy "tour authenticated read"
on "public"."tour"
as permissive
for select
to authenticated
using ((recruiter_relation_id IN ( SELECT recruiter_relation.id
   FROM recruiter_relation)));


create policy "tour authenticator delete"
on "public"."tour"
as permissive
for delete
to authenticator
using (true);


create policy "tour authenticator update"
on "public"."tour"
as permissive
for update
to authenticator
using (true);



