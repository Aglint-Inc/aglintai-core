create table "public"."application_reference" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "ats_json" json not null,
    "is_processed" boolean not null default false
);


create table "public"."function_url" (
    "value" text
);


create table "public"."job_reference" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "ats_json" jsonb,
    "public_job_id" uuid not null,
    "ats" text,
    "ats_job_id" uuid not null,
    "recruiter_id" uuid not null
);


alter table "public"."job_applications" drop column "badges";

alter table "public"."public_jobs" drop column "is_campus";

alter table "public"."recruiter" add column "ashby_sync_token" text;

alter table "public"."recruiter" add column "outreach_templates" jsonb[] default '{}'::jsonb[];

CREATE UNIQUE INDEX application_reference_pkey ON public.application_reference USING btree (id);

CREATE UNIQUE INDEX job_reference_pkey ON public.job_reference USING btree (id);

alter table "public"."application_reference" add constraint "application_reference_pkey" PRIMARY KEY using index "application_reference_pkey";

alter table "public"."job_reference" add constraint "job_reference_pkey" PRIMARY KEY using index "job_reference_pkey";

alter table "public"."job_reference" add constraint "job_reference_public_job_id_fkey" FOREIGN KEY (public_job_id) REFERENCES public_jobs(id) ON DELETE CASCADE not valid;

alter table "public"."job_reference" validate constraint "job_reference_public_job_id_fkey";

alter table "public"."job_reference" add constraint "job_reference_recruiter_id_fkey" FOREIGN KEY (recruiter_id) REFERENCES recruiter(id) ON DELETE CASCADE not valid;

alter table "public"."job_reference" validate constraint "job_reference_recruiter_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.ashbyapplicationsync()
 RETURNS jsonb
 LANGUAGE plpgsql
AS $function$
DECLARE
    result JSONB := '[]'::JSONB;  -- Variable to store the result
    function_url TEXT;
    rec_id uuid;
    request_results JSONB;
BEGIN
    FOR rec_id IN (SELECT id FROM recruiter WHERE ashby_key IS NOT NULL)
    LOOP
        SELECT value INTO function_url FROM env WHERE name = 'ashby-application';

        request_results := net.http_post(
            url := function_url,
            body := jsonb_build_object('recruiter_id', rec_id::uuid)
        );
    END LOOP;

    -- Return the final result as a JSONB array
    RETURN result;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.ashbyjobreference()
 RETURNS jsonb[]
 LANGUAGE plpgsql
AS $function$
DECLARE
    result JSONB[];
BEGIN
    -- Initialize an empty JSONB array for the results
    result := ARRAY[]::JSONB[];

    -- Select up to 50 records that meet the specified conditions
    SELECT ARRAY_AGG(row_to_json(data))
    INTO result
    FROM (
  SELECT 
    app.ats_json AS ats_json,
    job.public_job_id AS public_job_id,
    job.recruiter_id AS recruiter_id,
    rec.ashby_key AS apiKey 
    FROM application_reference app
    JOIN job_reference job ON (app.ats_json -> 'job'->>'id')::uuid = job.ats_job_id
    JOIN recruiter rec ON rec.id = job.recruiter_id
    WHERE app.is_processed=false
   
    ) as data;

    -- Return the final result as a JSONB array
    RETURN result;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.ashbyjobreference(rec_id uuid)
 RETURNS jsonb[]
 LANGUAGE plpgsql
AS $function$
DECLARE
    result JSONB[];
BEGIN
    -- Initialize an empty JSONB array for the results
    result := ARRAY[]::JSONB[];

    -- Select up to 50 records that meet the specified conditions
    SELECT ARRAY_AGG(row_to_json(data))
    INTO result
    FROM (
       SELECT 
          app.ats_json AS ats_json,
          job.public_job_id AS job_id,
          job.recruiter_id AS recruiter_id,
          rec.ashby_key AS apikey 
       FROM application_reference app
       JOIN job_reference job ON (app.ats_json -> 'job'->>'id')::uuid = job.ats_job_id
       JOIN recruiter rec ON rec.id = job.recruiter_id
       WHERE app.is_processed = false AND rec.id = rec_id limit 50
    ) as data;

    -- Return the final result as a JSONB array
    RETURN result;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.ashbysync()
 RETURNS jsonb
 LANGUAGE plpgsql
AS $function$
DECLARE
    request_results JSONB;  -- Variable to store the HTTP request result
    function_url text;
BEGIN
    -- Make a single HTTP request for the aggregated data
    SELECT value INTO function_url FROM env WHERE name = 'ashby-sync';
    -- Make a single HTTP request for the aggregated data
    
    request_results := net.http_post(
        url := function_url
        -- Add other parameters like headers or data if needed
    );
    -- Return the HTTP request result
    RETURN request_results;
END;
$function$
;


