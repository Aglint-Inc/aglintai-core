drop table if exists public.Interview_Interview_meeting_log;

create table
  public.Interview_Interview_meeting_log (
     id bigint generated by default as identity primary key
    , created_at timestamp with time zone not null default now()
    , meeting_id uuid not null references public.interview_meeting (id)
    , status text
    , start_time timestamp with time zone
    , end_time timestamp with time zone
    , organizer_id uuid
    , meeting_flow text
    , delta JSONB not null
  );


create table
  public.request_log (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    recruiter_id uuid not null references public.recruiter (id),
    meeting_id uuid not null references public.request (id),
    action_type text not null,
    action text not null
  );


DROP TRIGGER track_meeting_changes on interview_meeting;
drop function if exists public.create_Interview_Interview_meeting_log;


CREATE OR REPLACE FUNCTION create_Interview_Interview_meeting_log() 
RETURNS TRIGGER 
AS $$
DECLARE
    temp_column_name TEXT;
    old_value TEXT;
    new_value TEXT;
    query TEXT;
    delta_json jsonb = '{}'::jsonb;
BEGIN
    -- Iterate over the columns
    FOR temp_column_name IN 
        SELECT column_name as table_column_name
        FROM information_schema.columns 
        WHERE table_name = 'interview_meeting'
    LOOP
        -- Dynamically construct the query to handle different data types
        old_value := COALESCE(row_to_json(OLD)->>temp_column_name, 'null');
        new_value := COALESCE(row_to_json(NEW)->>temp_column_name, 'null');
        -- insert log if values have changed
        IF old_value IS DISTINCT FROM new_value THEN
            delta_json := delta_json || jsonb_build_object(temp_column_name, new_value); 
        END IF;
    END LOOP;

    INSERT INTO public.Interview_Interview_meeting_log (
        meeting_id
        , status
        , start_time
        , end_time
        , organizer_id
        , meeting_flow
        , delta
        )
        VALUES (
            OLD.id
            , OLD.status
            , OLD.start_time
            , OLD.end_time
            , OLD.organizer_id
            , OLD.meeting_flow
            , delta_json
        );  
    RETURN NEW;
END;
$$ 
LANGUAGE plpgsql;

CREATE TRIGGER track_meeting_changes
AFTER UPDATE ON interview_meeting
FOR EACH ROW