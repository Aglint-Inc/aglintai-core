SELECT string_agg(column_name||' '||data_type, ', ')
        FROM information_schema.columns 
        WHERE table_name = 'request'

drop table if exists public.request_log;
create table
  public.request_log (
     id bigint generated by default as identity primary key
    , created_at timestamp with time zone not null default now()
    , request_id uuid not null references public.request (id)
    , assignee_id uuid
    , status text
    , type text
    , priority text
    , delta jsonb NOT NULL
  );

CREATE OR REPLACE FUNCTION create_request_meeting_log() 
RETURNS TRIGGER 
AS $$
DECLARE
    temp_column_name TEXT;
    old_value TEXT;
    new_value TEXT;
    query TEXT;
    delta_json jsonb = '{}'::jsonb;
BEGIN
    -- Iterate over the columns
    FOREACH temp_column_name IN ARRAY ARRAY['assignee_id', 'status', 'type', 'priority']
    LOOP
        -- Dynamically construct the query to handle different data types
        old_value := COALESCE(row_to_json(OLD)->>temp_column_name, 'null');
        new_value := COALESCE(row_to_json(NEW)->>temp_column_name, 'null');
        -- insert log if values have changed
        IF old_value IS DISTINCT FROM new_value THEN
            delta_json := delta_json || jsonb_build_object(temp_column_name, new_value); 
        END IF;
    END LOOP;

    INSERT INTO public.request_log (
        request_id
        , assignee_id
        , status
        , type
        , priority  
        , delta
        )
        VALUES (
            OLD.id
            , OLD.assignee_id
            , OLD.status
            , OLD.type
            , OLD.priority
            , delta_json
        );  
    RETURN NEW;
END;
$$ 
LANGUAGE plpgsql;

CREATE TRIGGER track_request_changes
  AFTER UPDATE OF 
    assignee_id
    , status
    , type
    , priority
  ON request
FOR EACH ROW
EXECUTE FUNCTION create_request_meeting_log();